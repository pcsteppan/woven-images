{"version":3,"sources":["types/index.ts","Components/WeaveDisplay/WeaveDisplay.tsx","Components/Button/Button.tsx","Components/ButtonGrid/ButtonGrid.tsx","utils/index.ts","Components/DimensionsEditor/DimensionsEditor.tsx","Components/ThreadEditor/ThreadEditor.tsx","Components/ThreadButtonGrid/ThreadButtonGrid.tsx","Components/ImageEditor/ImageEditor.tsx","Components/LoomEditor/LoomEditor.tsx","Components/ToolBarMenu/ToolBarMenu.tsx","Components/ToolBarMenuNode/ToolBarMenuNode.tsx","presets/presetWeavingPatterns.tsx","Components/ToolBar/ToolBar.tsx","Hooks/useLocalStorage.ts","Components/Dialog/Dialog.tsx","Components/Container/Container.tsx","Components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["SubGridType","Orientation","ContainerActionType","LoomActionType","WeaveDisplay","props","canvasRef","useRef","canvasCtxRef","React","useEffect","current","getContext","ctx","fillStyle","backgroundClearColor","clearRect","width","height","fillRect","drawingInstructions","forEach","instruction","beginPath","fill","pattern","createPattern","setTransform","DOMMatrix","scaleSelf","repetitions","className","dimensions","x","y","ref","Button","style","gridRow","row","gridColumn","col","thread","dataSource","color","value","onClick","onClickHandler","ButtonGrid","handleButtonClick","e","subGridType","arrayOfButtons","gridValues","map","rowIndex","colIndex","cellSize","gridTemplateRows","length","gridTemplateColumns","uuidv4","require","v4","cloneDeep","dimensionDefault","harnessCount","treadleCount","warpCount","weftCount","defaultWarpThreadColor","defaultWeftThreadColor","defaultWarpThread","id","defaultWeftThread","createHarness","threads","Set","createTreadle","harnesses","createThread","loomDimensionsFromString","obj","data","threading","tieup","treadling","tieupNumbers","str","regex","matches","match","s","parseInt","numbersFromString","split","expandPatternString","Math","max","newStr","replaceAll","p1","p2","repeat","endsWith","substring","createThreadDataSource","createUUID","createLoomState","Array","_","warpThreads","i","weftThreads","treadles","treadlingInstructions","threadDataSource","name","indexedThreadPalette","defaultIndexedThreadPalette","convertLoomStateToJSON","state","JSON","stringify","convertLoomPartToJSON","treadle","indexOf","partArr","refArr","indexes","part","push","harness","threadPalette","selectedIndex","DimensionsEditor","useState","localDimensions","setLocalDimensions","handleChange","preventDefault","target","formItems","Object","keys","dimensionKey","htmlFor","separator","replace","toLowerCase","display","type","onChange","placeholder","toString","onSubmit","onDimensionsChange","ThreadEditor","newThreadDataSource","setNewThreadDataSource","paletteLock","setPaletteLock","threadItems","classes","backgroundColor","onSelectThreadDataSource","onAddThreadDataSource","onSetThreadDataSource","ThreadButtonGrid","buttonOnClickHandler","item","index","styleDataSource","orientation","HORIZONTAL","VERTICAL","ImageEditor","children","reducer","action","stateCopy","SET_HARNESSTOTHREADATTACHMENTS","harnessID","threadID","has","delete","add","SET_TREADLETOHARNESSATTACHMENTS","treadleID","SET_TREADLINGINSTRUCTION","instructionIndex","SET_HARNESSCOUNT","unshift","removedHarnesses","splice","SET_TREADLECOUNT","removedTreadles","removedTreadle","SET_WARPCOUNT","wt","SET_WEFTCOUNT","SET_STATE","SET_WARPTHREADDATASOURCE","warpThreadID","SET_WEFTTHREADDATASOURCE","weftThreadID","SET_SELECTEDTHREADDATASOURCE","ADD_THREADDATASOURCE","SET_SELECTEDTHREADDATASOURCEINDEX","dataSourceIndex","Loom","useReducer","dispatch","imageCellSize","setImageCellSize","imageScale","setImageScale","imageThreadWidth","setImageThreadWidth","imageBackgroundColor","setImageBackgroundColor","currentState","loomGridOnClickEventHandler","gridCol","HARNESSTOTHREADTABLE","TIEUPTABLE","TREADLINGTABLE","WEFTTHREADTABLE","WARPTHREADTABLE","instructions","size","hTSD","warpThread","rect","weftThread","weaveDisplayDrawingInstructions","verticalAlign","min","defaultValue","selectedThreadDataSourceIndex","newthreadDataSource","threadDataSourceToAdd","ToolBarMenu","ToolBarMenuNode","text","patterns","ToolBar","stateStrings","saveStateToolBarMenuNodes","saveStateDict","stateID","saveStateNames","onLoad","onCreateNew","onSave","onSaveAs","presetPatterns","stateString","harnessIndex","warpThreadIndex","treadleConnections","harnessIndexes","treadleIndex","inverseHarnessIndex","treadlingInstructionIndex","createLoomStateFromStringDataRepesentation","onLoadPreset","presetStateAsToolBarMenuNode","useLocalStorage","key","initialValue","readValue","window","localStorage","getItem","parse","error","console","warn","storedValue","setStoredValue","handleStorageChange","addEventListener","removeEventListener","newValue","Function","setItem","dispatchEvent","Event","Dialog","Container","setSaveStateDict","setSaveStateNames","initialState","setCurrentState","openDialog","setOpenDialog","currentDialog","setCurrentDialog","liveStateRef","setLiveStateRef","handleClose","SaveAsDialog","newUUID","stateClone","newName","serilizedState","CreateNewDialog","newState","jsonData","subArr","convertJSONToLoomState","serializedLoomState","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fb4e8fd.chunk.js","sourcesContent":["export enum SubGridType {\r\n  WARPTHREADTABLE,\r\n  WEFTTHREADTABLE,\r\n  TIEUPTABLE,\r\n  HARNESSTOTHREADTABLE,\r\n  TREADLINGTABLE \r\n}\r\n\r\nexport enum Orientation {\r\n  VERTICAL,\r\n  HORIZONTAL\r\n}\r\n\r\nexport enum ContainerActionType {\r\n  SET_WARPCOUNT,\r\n  SET_WEFTCOUNT,\r\n  SET_TREADLECOUNT,\r\n  SET_HARNESSCOUNT\r\n}\r\n  \r\nexport type ContainerAction =\r\n| { type: ContainerActionType.SET_WARPCOUNT; warpCount: number;}\r\n| { type: ContainerActionType.SET_WEFTCOUNT; weftCount: number;}\r\n| { type: ContainerActionType.SET_TREADLECOUNT; treadleCount: number;}\r\n| { type: ContainerActionType.SET_HARNESSCOUNT; harnessCount: number;}\r\n\r\nexport enum LoomActionType {\r\n    SET_HARNESSTOTHREADATTACHMENTS,\r\n    SET_TREADLETOHARNESSATTACHMENTS,\r\n    SET_TREADLINGINSTRUCTION,\r\n    SET_HARNESSCOUNT,\r\n    SET_TREADLECOUNT,\r\n    SET_WEFTCOUNT,\r\n    SET_WARPCOUNT,\r\n    SET_STATE,\r\n    SET_WARPTHREADDATASOURCE,\r\n    SET_WEFTTHREADDATASOURCE,\r\n    SET_SELECTEDTHREADDATASOURCEINDEX,\r\n    SET_SELECTEDTHREADDATASOURCE,\r\n    ADD_THREADDATASOURCE\r\n}\r\n\r\nexport type LoomAction =\r\n| { type: LoomActionType.SET_HARNESSTOTHREADATTACHMENTS; harnessID: number; threadID: number; }\r\n| { type: LoomActionType.SET_TREADLETOHARNESSATTACHMENTS; treadleID: number; harnessID: number; }\r\n| { type: LoomActionType.SET_TREADLINGINSTRUCTION; treadleID: number; instructionIndex: number; }\r\n| { type: LoomActionType.SET_HARNESSCOUNT; harnessCount: number; }\r\n| { type: LoomActionType.SET_TREADLECOUNT; treadleCount: number; }\r\n| { type: LoomActionType.SET_WARPCOUNT; warpCount: number; }\r\n| { type: LoomActionType.SET_WEFTCOUNT; weftCount: number; }\r\n| { type: LoomActionType.SET_STATE; state: LoomState; }\r\n| { type: LoomActionType.SET_WARPTHREADDATASOURCE; warpThreadID: number; }\r\n| { type: LoomActionType.SET_WEFTTHREADDATASOURCE; weftThreadID: number; }\r\n| { type: LoomActionType.SET_SELECTEDTHREADDATASOURCEINDEX; dataSourceIndex: number; }\r\n| { type: LoomActionType.ADD_THREADDATASOURCE; dataSource: ThreadDataSource; }\r\n| { type: LoomActionType.SET_SELECTEDTHREADDATASOURCE; dataSource: ThreadDataSource; }\r\n\r\nexport type LoomDimensions = {\r\n  [property: string]: number\r\n}\r\n\r\nexport type LoomState = {\r\n  name: string;\r\n  id: string;\r\n  dimensions: LoomDimensions;\r\n  harnesses: Harness[];\r\n  warpThreads: Thread[];\r\n  weftThreads: Thread[];\r\n  treadles: Treadle[];\r\n  treadlingInstructions: (Treadle | null)[];\r\n  threadDataSource: ThreadDataSource;\r\n  indexedThreadPalette: IndexedThreadPalette\r\n}\r\n\r\nexport type SerializedLoomState = string;\r\n\r\nexport type LoomStateDict = {\r\n  [uuid: string]: SerializedLoomState\r\n}\r\n\r\nexport type LoomStateStringRepresentation = {\r\n  name: string,\r\n  data: {\r\n    threading:  string,\r\n    tieup:      string,\r\n    treadling:  string\r\n  }\r\n}\r\n\r\nexport type Harness = {\r\n  threads: Set<Thread>\r\n}\r\n\r\nexport type Treadle = {\r\n  harnesses: Set<Harness>\r\n}\r\n\r\nexport type Thread = {\r\n  id: number\r\n  dataSource: ThreadDataSource\r\n}\r\n\r\nexport type ThreadDataSource = {\r\n  color: Color\r\n}\r\n\r\nexport type IndexedThreadPalette = {\r\n  threadPalette: ThreadDataSource[];\r\n  selectedIndex: number\r\n}\r\n\r\nexport type Color = string\r\n\r\nexport type DrawingInstruction = (ctx: CanvasRenderingContext2D) => void\r\n\r\n// type DrawInstructions = {\r\n//   // [instructionName: string] : (arg0: value) => value;\r\n// }\r\n\r\n// type Filter = {\r\n//   [propertyName: string] : (arg0: number) => number;\r\n// }\r\n\r\n// const apply = (f: Filter, DI: DrawInstructions) {\r\n \r\n// }\r\n\r\n// const a: Filter = {\r\n//   'red' : (v) => v*2,\r\n//   'blue' : (v) => v*2,\r\n//   'green' : (v) => v*1.5\r\n// }\r\n\r\n// // function which contains calls to argument\r\n// function draw(ctx: CanvasRenderingContext2D) {\r\n  \r\n//   ctx.rect(0,0,10,10);\r\n// }\r\n\r\n","import React from \"react\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { DrawingInstruction } from \"../../types\";\r\nimport './WeaveDisplay.css';\r\n\r\ninterface WeaveDisplayProps { \r\n    dimensions: { x: number; y: number; }; \r\n    drawingInstructions: DrawingInstruction[];\r\n    repetitions: number;\r\n    backgroundClearColor: string;\r\n}\r\n\r\nconst WeaveDisplay = (props: WeaveDisplayProps) => {\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    // 2D\r\n    const canvasCtxRef = React.useRef<CanvasRenderingContext2D | null>(null);\r\n    // WEBGL\r\n    // const canvasCtxRef = React.useRef<WebGLRenderingContext | null>(null);\r\n\r\n    useEffect(() => {\r\n    // Initialize\r\n        if (canvasRef.current) {\r\n            //2D\r\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\r\n            //WEBGL\r\n            // canvasCtxRef.current = canvasRef.current.getContext('webgl');\r\n            \r\n            let ctx = canvasCtxRef.current; // Assigning to a temp variable\r\n\r\n            // 2D\r\n            ctx!.fillStyle=props.backgroundClearColor;\r\n            ctx!.clearRect(0,0,canvasRef.current.width,canvasRef.current.height);\r\n            ctx!.fillRect(0,0,canvasRef.current.width,canvasRef.current.height);\r\n            \r\n            \r\n            // WEBGL\r\n            // ctx!.clearColor(0.0,0.0,0.0,1.0);\r\n            \r\n            \r\n            // Note the Non Null Assertion\r\n            // ctx!.arc(95, 50, 40, 0, 2 * Math.PI);\r\n            // ctx!.rect(0,0,100,100);\r\n            \r\n            props.drawingInstructions.forEach(instruction => {\r\n                if(ctx){\r\n                    ctx.beginPath();\r\n                    instruction(ctx);\r\n                    ctx.fill();\r\n                }\r\n            })\r\n\r\n            if(ctx) {\r\n                const pattern = ctx.createPattern(canvasRef.current, 'repeat');\r\n                pattern?.setTransform(new DOMMatrix().scaleSelf(1/props.repetitions, 1/props.repetitions, 0, 0));\r\n                if(pattern){\r\n                    ctx.fillStyle = pattern;\r\n                    ctx.fillRect(0,0,canvasRef.current.width,canvasRef.current.height);\r\n                }\r\n            }\r\n        }\r\n    }, [props]);\r\n    \r\n\r\n    return <canvas className=\"Canvas\" width={props.dimensions.x} height={props.dimensions.y} ref={canvasRef}/>\r\n}\r\n\r\nexport default WeaveDisplay;","import { threadId } from 'node:worker_threads';\r\nimport React, { CSSProperties, MouseEventHandler } from 'react';\r\nimport { Thread, ThreadDataSource } from '../../types';\r\nimport './Button.css';\r\n\r\ninterface ButtonProps {\r\n    styleDataSource?: ThreadDataSource,\r\n    value?: boolean,\r\n    row: number,\r\n    col: number,\r\n    cellSize: number | {width: number, height: number},\r\n    thread?: Thread,\r\n    onClickHandler: (e: React.MouseEvent<HTMLDivElement>) => void;\r\n}\r\n\r\nconst Button = (props: ButtonProps) => {\r\n    const style : CSSProperties = {\r\n        gridRow: props.row+1,\r\n        gridColumn: props.col+1\r\n    }\r\n\r\n    if(props.thread) {\r\n        style[\"backgroundColor\"] = props.thread.dataSource.color;\r\n    }\r\n\r\n    return <div className={\"button \" + (props.value ? \"isActive\" : \"\")}\r\n                style={style}\r\n                onClick={props.onClickHandler}></div>\r\n}\r\n\r\nexport default Button;","import React, { Dispatch, MouseEventHandler, SetStateAction } from 'react';\r\nimport { SubGridType } from '../../types';\r\nimport Button from '../Button/Button';\r\nimport './ButtonGrid.scss';\r\n\r\ninterface ButtonGridProps {\r\n    gridValues: boolean[][]; \r\n    // setGridValues: Dispatch<SetStateAction<boolean[][]>>;\r\n    cellSize: number;\r\n    subGridType: SubGridType;\r\n    onClickHandler: (e: React.MouseEvent<HTMLDivElement>, type: SubGridType) => void;\r\n}\r\n\r\nconst ButtonGrid = (props: ButtonGridProps) => {\r\n\r\n    const handleButtonClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n        props.onClickHandler(e, props.subGridType);\r\n    }\r\n\r\n    const arrayOfButtons = props.gridValues.map((row, rowIndex) => {\r\n        return row.map((value, colIndex) => {\r\n            return <Button value={value}\r\n                           row={rowIndex}\r\n                           col={colIndex}\r\n                           cellSize={props.cellSize}\r\n                           onClickHandler={handleButtonClick}/>\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div className=\"ButtonGrid\"\r\n             style={{gridTemplateRows: `repeat(1fr, ${props.gridValues.length})`,\r\n                     gridTemplateColumns: `repeat(1fr, ${props.gridValues[0].length})`,\r\n                     width: `${props.gridValues[0].length*props.cellSize}px`,\r\n                     height: `${props.gridValues.length*props.cellSize}px`}}>\r\n            {arrayOfButtons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonGrid;","import { Harness, IndexedThreadPalette, LoomDimensions, LoomState, LoomStateStringRepresentation, Thread, ThreadDataSource, Treadle } from \"../types\";\r\n// import { uuidv4 }  from 'uuid';\r\nconst { v4: uuidv4 } = require('uuid');\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\n\r\nexport const dimensionDefault : LoomDimensions = {\r\n    harnessCount: 4,\r\n    treadleCount: 4,\r\n    warpCount: 16,\r\n    weftCount: 16\r\n}\r\n\r\nexport const defaultWarpThreadColor = \"#000000\";\r\nexport const defaultWeftThreadColor = \"#FFFFFF\";\r\n\r\nexport const defaultWarpThread : Thread = {\r\n    id: 0,\r\n    dataSource: {\r\n        color: defaultWarpThreadColor\r\n    }\r\n}\r\n\r\nexport const defaultWeftThread : Thread = {\r\n    id: 0,\r\n    dataSource: {\r\n        color: defaultWeftThreadColor\r\n    }\r\n}\r\n\r\nexport function decamelize(str: string, separator: string){\r\n    separator = typeof separator === 'undefined' ? '_' : separator;\r\n    \r\n    return str\r\n    .replace(/([a-z\\d])([A-Z])/g, '$1' + separator + '$2')\r\n    .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1' + separator + '$2')\r\n    .toLowerCase();\r\n}\r\n\r\nexport const createHarness = () : Harness => {\r\n    return { threads: new Set<Thread>() } \r\n}\r\n\r\nexport const createTreadle = () : Treadle => {\r\n    return { harnesses: new Set<Harness>() } \r\n}\r\n\r\nexport const createThread = (id: number, color: string) : Thread => {\r\n    return {\r\n        id,\r\n        dataSource: {\r\n            color\r\n        }\r\n    }\r\n}\r\n\r\nexport function loomDimensionsFromString(obj: LoomStateStringRepresentation) : LoomDimensions {\r\n    const {threading, tieup, treadling} = obj.data;\r\n    const tieupNumbers : number[] = numbersFromString(tieup);\r\n    \r\n    return {\r\n        warpCount: threading.split(',').length,\r\n        weftCount: expandPatternString(treadling).split(',').length,\r\n        treadleCount: tieup.split(',').length,\r\n        harnessCount: Math.max(...tieupNumbers)\r\n    }\r\n}\r\n\r\nfunction expandPatternString(str: string) : string {\r\n    // 1x4 = 1,1,1,1,\r\n    const regex = /(\\d+)x(\\d+)/g;\r\n    let newStr = str.replaceAll(regex, (match, p1, p2) => {\r\n        const newSubstring = (p1+\",\").repeat(p2)\r\n        return newSubstring\r\n    })\r\n    \r\n    newStr = newStr.replaceAll(/,,/g, \",\")\r\n    if (newStr.endsWith(\",\")) \r\n        newStr = newStr.substring(0, newStr.length-1);\r\n    \r\n    return newStr;\r\n}\r\n\r\nfunction numbersFromString(str: string) : number[] {\r\n    const regex = /(\\d+)/g;\r\n    const matches = str.match(regex);\r\n    return matches ? \r\n        matches.map(s => parseInt(s)) :\r\n        [];\r\n}\r\n\r\nexport function createThreadDataSource(color: string) : ThreadDataSource {\r\n    return {\r\n        color: color\r\n    }\r\n}\r\n\r\nexport function createUUID() : string {\r\n    return uuidv4();\r\n}\r\n\r\nexport function createLoomState(dimensions: LoomDimensions) : LoomState {\r\n\r\n    const harnesses = (harnessCount: number) : Array<Harness> => {\r\n        return new Array(harnessCount).fill(createHarness()).map(_ => createHarness());\r\n    }\r\n\r\n    const warpThreads = (warpCount: number) : Array<Thread> => {\r\n        return new Array(warpCount).fill(defaultWarpThread).map((_, i) => createThread(i, defaultWarpThreadColor));\r\n    }\r\n\r\n    const weftThreads = (warpCount: number) : Array<Thread> => {\r\n        return new Array(warpCount).fill(defaultWeftThread).map((_, i) => createThread(i, defaultWeftThreadColor));\r\n    }\r\n\r\n    const treadles = (treadleCount: number) : Array<Treadle> => {\r\n        return new Array(treadleCount).fill(createTreadle()).map(_ => createTreadle());\r\n    }\r\n\r\n    const treadlingInstructions = (weftCount: number) => {\r\n        return new Array(weftCount).fill(null);\r\n    }\r\n\r\n    return {\r\n        id: createUUID(),\r\n        dimensions,\r\n        harnesses: harnesses(dimensions.harnessCount),\r\n        warpThreads: warpThreads(dimensions.warpCount),\r\n        weftThreads: weftThreads(dimensions.weftCount),\r\n        treadles: treadles(dimensions.treadleCount),\r\n        treadlingInstructions: treadlingInstructions(dimensions.weftCount),\r\n        threadDataSource: { color: \"#FFFFFF\" },\r\n        name: \"untitled\",\r\n        indexedThreadPalette: (cloneDeep(defaultIndexedThreadPalette))\r\n    }\r\n}\r\n\r\ntype LoomPart<T> = {\r\n    [setName: string]: Set<T>\r\n}\r\n\r\nexport const convertLoomStateToJSON = (state: LoomState) : string => {\r\n    return JSON.stringify({\r\n        id: state.id,\r\n        dimensions: state.dimensions,\r\n        treadles: convertLoomPartToJSON(state.treadles, state.harnesses),\r\n        harnesses: convertLoomPartToJSON(state.harnesses, state.warpThreads),\r\n        treadlingInstructions: state.treadlingInstructions.map(treadle => treadle ? state.treadles.indexOf(treadle) : -1),\r\n        warpThreads: state.warpThreads,//.map(thread => convertThreadToJSON(thread)),\r\n        weftThreads: state.weftThreads,//.map(thread => convertThreadToJSON(thread)),\r\n        threadDataSource: state.threadDataSource,\r\n        name: state.name,\r\n        indexedThreadPalette: state.indexedThreadPalette\r\n    })\r\n}\r\n\r\nexport const convertJSONToLoomState = (jsonData: string) : LoomState => {\r\n    const state = JSON.parse(jsonData);\r\n    state.harnesses = state.harnesses.map((subArr : Array<number>) => {\r\n        const harness: Harness = createHarness();\r\n        subArr.forEach((index: number) => { harness.threads.add(state.warpThreads[index])});\r\n        return harness;\r\n    })\r\n    state.treadles = state.treadles.map((subArr: Array<number>) => {\r\n        const treadle : Treadle = createTreadle();\r\n        subArr.forEach((index: number) => { treadle.harnesses.add(state.harnesses[index])});\r\n        return treadle;\r\n    })\r\n    state.treadlingInstructions = state.treadlingInstructions.map((index: number) => state.treadles[index]);\r\n    return state;\r\n}\r\n\r\n// treadlingInstructions is an array of references to treadles\r\n// a harness is an object containing a property which is a set of threads\r\n// a treadle is an object containing a property which is a set of harnesses\r\n// a thread is a datasource\r\nfunction convertLoomPartToJSON<T>(partArr: Array<LoomPart<T>>, refArr: Array<T>) : Array<Array<number>> {\r\n    // iterate through all items in set, push indexOf item in refArr to newArr\r\n    const indexes : Array<Array<number>> = [];\r\n    partArr.forEach((part, i) => {\r\n        indexes.push([]);\r\n        if(\"harnesses\" in part) {\r\n            // part is treadle, T is harness\r\n            part.harnesses.forEach((harness : T) => {\r\n                indexes[i].push(refArr.indexOf(harness));\r\n            })\r\n\r\n        } else if (\"threads\" in part) {\r\n            // part is harness, T is thread\r\n            part.threads.forEach((thread : T) => {\r\n                indexes[i].push(refArr.indexOf(thread));\r\n            })\r\n        }\r\n    })\r\n    return indexes;\r\n}\r\n\r\nconst defaultIndexedThreadPalette : IndexedThreadPalette = {\r\n    threadPalette: [createThreadDataSource(\"#FFFFFF\"), createThreadDataSource(\"#000000\")],\r\n    selectedIndex: 0\r\n}; \r\n\r\nexport function createLoomStateFromStringDataRepesentation(obj: LoomStateStringRepresentation) : LoomState {\r\n    const state = createLoomState(loomDimensionsFromString(obj));\r\n    const {threading, tieup, treadling} = obj.data;\r\n\r\n    // parse threading\r\n    // connect harness to warp threads\r\n    threading.split(',')\r\n        .map(s => parseInt(s))\r\n        .forEach((harnessIndex, warpThreadIndex) => {\r\n            state.harnesses[harnessIndex-1].threads.add(state.warpThreads[warpThreadIndex])\r\n        })\r\n\r\n    // parse tieup\r\n    // connect treadles to harnesses\r\n    tieup.split(',')\r\n         .map(treadleConnections => treadleConnections.split('+')\r\n                                                       .map(s => parseInt(s)))\r\n         .forEach((harnessIndexes, treadleIndex) => {\r\n            harnessIndexes.forEach(harnessIndex => {\r\n                const inverseHarnessIndex = (state.harnesses.length-1) - (harnessIndex-1);\r\n                state.treadles[treadleIndex].harnesses.add(state.harnesses[inverseHarnessIndex])\r\n            })\r\n         })\r\n    \r\n\r\n    // parse treadling\r\n    // write treadling instructions\r\n    expandPatternString(treadling)\r\n        .split(',')\r\n        .map(s => parseInt(s))\r\n        .forEach((treadleIndex, treadlingInstructionIndex) => {\r\n            state.treadlingInstructions[treadlingInstructionIndex] = state.treadles[treadleIndex-1];\r\n        })\r\n\r\n    state.name = obj.name;\r\n\r\n    return state;\r\n}","import { useEffect, useState } from \"react\";\r\nimport { LoomDimensions } from \"../../types\"\r\nimport { decamelize } from \"../../utils\";\r\nimport './DimensionsEditor.css'\r\n\r\ninterface DimensionsEditorProps {\r\n    dimensions: LoomDimensions\r\n    onDimensionsChange : (...args: any) => void\r\n}\r\n\r\nexport const DimensionsEditor = (props: DimensionsEditorProps) => {\r\n\r\n    const [localDimensions, setLocalDimensions] = useState(props.dimensions);\r\n    \r\n    useEffect( () => {\r\n        setLocalDimensions(props.dimensions);\r\n    }, [props.dimensions])\r\n\r\n\r\n    const onSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        props.onDimensionsChange(localDimensions);\r\n    }\r\n\r\n    const handleChange = (e : any) => {\r\n        e.preventDefault();\r\n        setLocalDimensions({...localDimensions, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    const formItems = Object.keys(props.dimensions).map((dimensionKey : string) => {\r\n        return (\r\n            <>\r\n            <label className=\"InputLabel\" htmlFor={dimensionKey}>{decamelize(dimensionKey, \" \") + \" \"}</label>\r\n            <input className=\"InputField\" style={{display: \"inline\"}} type=\"textfield\" name={dimensionKey} onChange={handleChange} placeholder={props.dimensions[dimensionKey].toString()}></input>\r\n            <p className=\"CurrentDimension\" style={{display: \"inline\"}}>{`→ ${props.dimensions[dimensionKey]}`}</p>\r\n            <br/>\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"Panel\">\r\n        <h1 className=\"FormHeader\">Dimensions Editor</h1>\r\n        <div className=\"PanelContent\">\r\n            <form className=\"DimensionsForm\" onSubmit={onSubmit}>\r\n                {formItems}\r\n                {/* <label style={{verticalAlign: \"top\"}} htmlFor=\"scaleSlider\">scale </label>\r\n                <input type=\"range\" min=\"1\" max=\"8\" defaultValue=\"1\" id=\"scaleSlider\" onChange={props.weaveDisplayScalarOnChange}/><br/> */}\r\n                <button className=\"ApplyBtn\" type=\"submit\">Apply</button>\r\n            </form>\r\n        </div>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from 'react';\r\nimport { IndexedThreadPalette, Thread, ThreadDataSource } from '../../types';\r\nimport { createThread, createThreadDataSource } from '../../utils';\r\nimport './ThreadEditor.css'\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\ninterface ThreadEditorProps {\r\n    indexedThreadPalette: IndexedThreadPalette\r\n    onSelectThreadDataSource: (index: number) => void\r\n    onSetThreadDataSource: (threadDataSource: ThreadDataSource) => void\r\n    onAddThreadDataSource: (threadDataSource: ThreadDataSource) => void\r\n}\r\n\r\nexport const ThreadEditor = (props: ThreadEditorProps) => {\r\n    const [newThreadDataSource, setNewThreadDataSource] = useState<ThreadDataSource>(createThreadDataSource(\"000000\"));\r\n    const [paletteLock, setPaletteLock] = useState<boolean>(true);\r\n\r\n    const handleColorPickerOnChange = (e: any) => {\r\n        if(!paletteLock){\r\n            const newThreadDataSource = {...props.indexedThreadPalette.threadPalette[props.indexedThreadPalette.selectedIndex], color: e.target.value}\r\n            props.onSetThreadDataSource(newThreadDataSource);\r\n        }\r\n        setNewThreadDataSource({...newThreadDataSource, color: e.target.value})\r\n    }\r\n\r\n    const handleAddThreadOnClick = (e: any) => {\r\n        props.onAddThreadDataSource(newThreadDataSource);\r\n    }\r\n\r\n    const togglePaletteLock = () => {\r\n        setPaletteLock(!paletteLock);\r\n    }\r\n\r\n    const threadItems = props.indexedThreadPalette.threadPalette.map((threadDataSource, i) => {\r\n        const classes = \"Thread\" + ((i==props.indexedThreadPalette.selectedIndex) ? \" selected\" : \"\");\r\n        // console.log(threadDataSource.color);\r\n        return <div className={classes} \r\n                    id={\"thread-\"+i.toString()} \r\n                    style={{backgroundColor: threadDataSource.color}}\r\n                    onClick={(e: any) => {props.onSelectThreadDataSource(e.target.id.split('-')[1])}}/>\r\n    })\r\n    \r\n    return (\r\n        <div className=\"ThreadEditorContainer Panel\">\r\n            <h1>Thread Palette</h1>\r\n            <div className=\"PanelContent\">\r\n                <div className=\"ThreadContainer\">\r\n                    {threadItems}\r\n                    <button className=\"AddThreadButton\"\r\n                            onClick={handleAddThreadOnClick}>+</button>\r\n                </div>\r\n                <div className=\"ThreadAttributeDesigner\">\r\n                    <input className=\"ColorPicker\" type=\"color\" id=\"ColorPicker\" onChange={handleColorPickerOnChange}></input>\r\n                </div>\r\n                <button className=\"LockBtn\" onClick={togglePaletteLock}>{paletteLock ? \"Unlock Palette\" : \"Lock Palette\"}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { Dispatch, MouseEventHandler, SetStateAction } from 'react';\r\nimport { Orientation, SubGridType, Thread } from '../../types';\r\nimport Button from '../Button/Button';\r\nimport '../ButtonGrid/ButtonGrid.scss';\r\n\r\ninterface ThreadButtonGridProps {\r\n    gridValues: Thread[];\r\n    orientation: Orientation;\r\n    // setGridValues: Dispatch<SetStateAction<boolean[][]>>;\r\n    cellSize: {width: number, height: number};\r\n    subGridType: SubGridType;\r\n    onClickHandler: (e: React.MouseEvent<HTMLDivElement>, subGridType: SubGridType) => void;\r\n}\r\n\r\nconst ThreadButtonGrid = (props: ThreadButtonGridProps) => {\r\n\r\n    const buttonOnClickHandler = (e: any) => {\r\n        props.onClickHandler(e, props.subGridType);\r\n    }\r\n\r\n    const arrayOfButtons = props.gridValues.map((item, index) => {\r\n        return <Button  styleDataSource={item.dataSource}\r\n                        col={(props.orientation===Orientation.HORIZONTAL) ? index : 0}\r\n                        row={(props.orientation===Orientation.VERTICAL) ? index : 0}\r\n                        cellSize={{width: props.cellSize.width, height: props.cellSize.height}}\r\n                        onClickHandler={buttonOnClickHandler}\r\n                        thread={props.gridValues[index]}/>\r\n    })\r\n\r\n    return (\r\n        <div className=\"ButtonGrid\"\r\n             style={{gridTemplateColumns: `repeat(1fr, ${props.orientation===Orientation.VERTICAL ? props.gridValues.length : 1})`,\r\n                     gridTemplateRows: `repeat(1fr, ${props.orientation===Orientation.HORIZONTAL ? props.gridValues.length : 1})`,\r\n                     width: `${(props.orientation===Orientation.HORIZONTAL ? props.gridValues.length : 1)*props.cellSize.width}px`,\r\n                     height: `${(props.orientation===Orientation.VERTICAL ? props.gridValues.length : 1)*props.cellSize.height}px`}}>\r\n            {arrayOfButtons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThreadButtonGrid;","const ImageEditor = (props: any) => {\r\n    return (\r\n        <div className=\"Panel\">\r\n            <h1 className=\"FormHeader\">Image Editor</h1>\r\n            <div className=\"PanelContent\">\r\n                {props.children}\r\n                {/* <form className=\"ImageForm\" onSubmit={onSubmit}>\r\n                    {formItems}\r\n                    <label style={{verticalAlign: \"top\"}} htmlFor=\"scaleSlider\">scale </label>\r\n                    <input type=\"range\" min=\"1\" max=\"8\" defaultValue=\"1\" id=\"scaleSlider\" onChange={props.weaveDisplayScalarOnChange}/><br/>\r\n                    <button className=\"ApplyBtn\" type=\"submit\">Apply</button>\r\n                </form> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageEditor;","import React, { useEffect, useReducer, useRef, useState } from \"react\";\r\nimport WeaveDisplay from \"../WeaveDisplay/WeaveDisplay\"\r\nimport ButtonGrid from \"../ButtonGrid/ButtonGrid\"\r\nimport {LoomActionType, LoomAction, LoomState, Harness, Treadle, Thread, DrawingInstruction, Color, LoomDimensions, Orientation, SubGridType, ThreadDataSource} from '../../types';\r\nimport {createThread, createTreadle, createHarness, dimensionDefault, defaultWarpThread, defaultWeftThread, defaultWarpThreadColor, defaultWeftThreadColor, createLoomState} from '../../utils';\r\nimport './LoomEditor.scss'\r\nimport { DimensionsEditor } from \"../DimensionsEditor/DimensionsEditor\";\r\nimport { SaveLoadMenu } from \"../SaveLoadMenu/SaveLoadMenu\";\r\nimport { ThreadEditor } from \"../ThreadEditor/ThreadEditor\";\r\nimport ThreadButtonGrid from \"../ThreadButtonGrid/ThreadButtonGrid\";\r\nimport ImageEditor from \"../ImageEditor/ImageEditor\";\r\nimport { serialize } from \"node:v8\";\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\nfunction reducer(state: LoomState, action: LoomAction) : LoomState {\r\n    const stateCopy : LoomState = cloneDeep(state);\r\n\r\n    switch(action.type) {\r\n        case LoomActionType.SET_HARNESSTOTHREADATTACHMENTS:\r\n            // LEFT TABLE\r\n            { // block-scope for local consts\r\n            const harness : Harness = stateCopy.harnesses[action.harnessID];\r\n            const thread : Thread = stateCopy.warpThreads[action.threadID];\r\n\r\n            if(harness.threads.has(thread)) {\r\n                harness.threads.delete(thread);\r\n            } else {\r\n                for(let i = 0; i < stateCopy.harnesses.length; i++) {\r\n                    if(stateCopy.harnesses[i].threads.has(thread)) {\r\n                        stateCopy.harnesses[i].threads.delete(thread);\r\n                    }\r\n                }\r\n                harness.threads.add(thread);\r\n            }\r\n            }\r\n            break;\r\n        case LoomActionType.SET_TREADLETOHARNESSATTACHMENTS:\r\n            // TIEUP\r\n            { // block-scope for local consts\r\n            const treadle : Treadle = stateCopy.treadles[action.treadleID];\r\n            const harness : Harness = stateCopy.harnesses[action.harnessID];\r\n            \r\n            if(treadle.harnesses.has(harness)) {\r\n                treadle.harnesses.delete(harness);\r\n            } else {\r\n                treadle.harnesses.add(harness);\r\n            }\r\n            }\r\n            break;\r\n        case LoomActionType.SET_TREADLINGINSTRUCTION:\r\n            // RIGHT TABLE\r\n            {\r\n            const treadle : Treadle = stateCopy.treadles[action.treadleID];\r\n            if(stateCopy.treadlingInstructions[action.instructionIndex] === treadle) {\r\n                stateCopy.treadlingInstructions[action.instructionIndex] = null;\r\n            } else {\r\n                stateCopy.treadlingInstructions[action.instructionIndex] = treadle;\r\n            }\r\n            }\r\n            break;\r\n        case LoomActionType.SET_HARNESSCOUNT:\r\n            if(action.harnessCount > stateCopy.harnesses.length){\r\n                while(stateCopy.harnesses.length < action.harnessCount) {\r\n                    stateCopy.harnesses.unshift(createHarness());\r\n                }\r\n            } else {\r\n                const removedHarnesses = stateCopy.harnesses.splice(0, stateCopy.harnesses.length - action.harnessCount);\r\n                stateCopy.treadles.forEach(treadle => {\r\n                    removedHarnesses.forEach(harness => {\r\n                        treadle.harnesses.delete(harness);\r\n                    })\r\n                })\r\n            }\r\n            stateCopy.dimensions.harnessCount = action.harnessCount;\r\n            break;\r\n        case LoomActionType.SET_TREADLECOUNT:\r\n            if(action.treadleCount > stateCopy.treadles.length){\r\n                while(stateCopy.treadles.length < action.treadleCount) {\r\n                    stateCopy.treadles.push(createTreadle());\r\n                }\r\n            } else {\r\n                const removedTreadles = stateCopy.treadles.splice(action.treadleCount);\r\n                stateCopy.treadlingInstructions.forEach(instruction => {\r\n                    removedTreadles.forEach(removedTreadle => {\r\n                        instruction = ( instruction === removedTreadle ) ? null : instruction;\r\n                    })\r\n                })\r\n            }\r\n            stateCopy.dimensions.treadleCount = action.treadleCount;\r\n            break;\r\n        case LoomActionType.SET_WARPCOUNT:\r\n            if (action.warpCount > state.warpThreads.length) {\r\n                while(stateCopy.warpThreads.length < action.warpCount) {\r\n                    stateCopy.warpThreads.unshift(createThread(stateCopy.warpThreads.length, defaultWarpThreadColor));\r\n                }\r\n            } else {\r\n                stateCopy.warpThreads.splice(0, stateCopy.warpThreads.length - action.warpCount);\r\n            }\r\n            stateCopy.warpThreads.forEach((wt, i) => {\r\n                wt.id = i;\r\n            });\r\n            stateCopy.dimensions.warpCount = action.warpCount;\r\n            break;\r\n        case LoomActionType.SET_WEFTCOUNT:\r\n            // weft and treadling instruction\r\n            if (action.weftCount > state.weftThreads.length) {\r\n                while(stateCopy.weftThreads.length < action.weftCount) {\r\n                    stateCopy.weftThreads.push(createThread(stateCopy.weftThreads.length, defaultWeftThreadColor));\r\n                    stateCopy.treadlingInstructions.push(null);\r\n                }\r\n            } else {\r\n                stateCopy.weftThreads.splice(action.weftCount);\r\n                stateCopy.treadlingInstructions.splice(action.weftCount);\r\n            }\r\n            stateCopy.dimensions.weftCount = action.weftCount;\r\n            break;\r\n        case LoomActionType.SET_STATE:\r\n            const newState = action.state;\r\n            return newState;\r\n            break;\r\n        case LoomActionType.SET_WARPTHREADDATASOURCE:\r\n            stateCopy.warpThreads[action.warpThreadID].dataSource = stateCopy.indexedThreadPalette.threadPalette[stateCopy.indexedThreadPalette.selectedIndex];\r\n            break;\r\n        case LoomActionType.SET_WEFTTHREADDATASOURCE:\r\n            stateCopy.weftThreads[action.weftThreadID].dataSource = stateCopy.indexedThreadPalette.threadPalette[stateCopy.indexedThreadPalette.selectedIndex];\r\n            break;\r\n        case LoomActionType.SET_SELECTEDTHREADDATASOURCE:\r\n            stateCopy.indexedThreadPalette.threadPalette[stateCopy.indexedThreadPalette.selectedIndex] = action.dataSource;\r\n            break;\r\n        case LoomActionType.ADD_THREADDATASOURCE:\r\n            stateCopy.indexedThreadPalette.threadPalette.push(cloneDeep(action.dataSource));\r\n            break;\r\n        case LoomActionType.SET_SELECTEDTHREADDATASOURCEINDEX:\r\n            stateCopy.indexedThreadPalette.selectedIndex = action.dataSourceIndex;\r\n        // case LoomActionyType.SET_\r\n    }\r\n    // actions\r\n    return stateCopy;\r\n}\r\n\r\ninterface LoomProps {\r\n    currentState: LoomState,\r\n    onChange: (...args: any) => void\r\n}\r\n\r\nconst Loom = (props: LoomProps) => {\r\n    const [state, dispatch] = useReducer(reducer, createLoomState(dimensionDefault));\r\n\r\n    // IMAGE PROPERTIES\r\n    const [imageCellSize, setImageCellSize] = useState<number>(16);\r\n    const [imageScale, setImageScale] = useState<number>(1);\r\n    const [imageThreadWidth, setImageThreadWidth] = useState<number>(100);\r\n    const [imageBackgroundColor, setImageBackgroundColor] = useState<string>(\"#000000\");\r\n\r\n    useEffect(() => {   \r\n        dispatch({ type: LoomActionType.SET_STATE, state: props.currentState });\r\n    }, [props.currentState]); //, [(props.currentState)]\r\n\r\n    useEffect(() => {\r\n        props.onChange(state);\r\n    }, [state]);\r\n\r\n    const loomGridOnClickEventHandler = (e: any, type: SubGridType) => {\r\n        const target = e.target as HTMLDivElement;\r\n        const gridRow : number = parseInt(target.style.gridRow)-1;\r\n        const gridCol : number = parseInt(target.style.gridColumn)-1;\r\n        switch(type) {\r\n            case SubGridType.HARNESSTOTHREADTABLE:\r\n                dispatch({type: LoomActionType.SET_HARNESSTOTHREADATTACHMENTS, harnessID: gridRow, threadID: gridCol});\r\n                break;\r\n            case SubGridType.TIEUPTABLE:\r\n                dispatch({type: LoomActionType.SET_TREADLETOHARNESSATTACHMENTS, treadleID: gridCol, harnessID: gridRow});\r\n                break;\r\n            case SubGridType.TREADLINGTABLE:\r\n                dispatch({type: LoomActionType.SET_TREADLINGINSTRUCTION, treadleID: gridCol, instructionIndex: gridRow});\r\n                break;\r\n            case SubGridType.WEFTTHREADTABLE:\r\n                // Weft thread data source change\r\n                dispatch({type: LoomActionType.SET_WEFTTHREADDATASOURCE, weftThreadID: gridRow});\r\n                break;\r\n            case SubGridType.WARPTHREADTABLE:\r\n                // Warp thread data source change\r\n                dispatch({type: LoomActionType.SET_WARPTHREADDATASOURCE, warpThreadID: gridCol});\r\n                break;\r\n        }\r\n    }\r\n\r\n    const topGridValues = (warpThreads: Thread[], harnesses: Harness[]) : Array<Array<boolean>> => {\r\n        const gridValues : boolean[][] = new Array<Array<boolean>>(harnesses.length).fill(new Array<boolean>()).map((_, rowIndex) => {\r\n            return new Array<boolean>(warpThreads.length).fill(false).map((_, colIndex) => {\r\n                return harnesses[rowIndex].threads.has(warpThreads[colIndex]);\r\n            })\r\n        });\r\n        return gridValues;\r\n    }\r\n\r\n    const tieup = (harnesses: Harness[], treadles: Treadle[]) => {\r\n        const gridValues : boolean[][] = new Array<Array<boolean>>(harnesses.length).fill(new Array<boolean>()).map((_, rowIndex) => {\r\n            return new Array<boolean>(treadles.length).fill(false).map((_, colIndex) => {\r\n                return treadles[colIndex].harnesses.has(harnesses[rowIndex]);\r\n            })\r\n        });\r\n        return gridValues;\r\n    }\r\n\r\n    const rightGridValues = (treadles: Treadle[], treadlingInstructions: (Treadle | null)[]) => {\r\n        const gridValues : boolean[][] = new Array<Array<boolean>>(treadlingInstructions.length).fill(new Array<boolean>()).map((_, rowIndex) => {\r\n            return new Array<boolean>(treadles.length).fill(false).map((_, colIndex) => {\r\n                return treadlingInstructions[rowIndex] === treadles[colIndex];\r\n            })\r\n        });\r\n        return gridValues;\r\n    }\r\n\r\n    const standardWarpDrawInstruction = (x: number, y: number, width: number, height: number, color: string) : DrawingInstruction => {\r\n        return ((ctx: CanvasRenderingContext2D) => {\r\n            ctx.rect(x,y,width,height);\r\n            ctx.fillStyle = color;\r\n        })\r\n    }\r\n\r\n    const standardWeftDrawInstruction = (y: number, width: number, height: number, color: string) : DrawingInstruction => {\r\n        return ((ctx: CanvasRenderingContext2D) => {\r\n            ctx.rect(0, y, width, height);\r\n            ctx.fillStyle = color;\r\n        })\r\n    }\r\n\r\n    const backgroundWarpDrawInstruction = (x: number, width: number, height: number, color: string) : DrawingInstruction => {\r\n        return ((ctx: CanvasRenderingContext2D) => {\r\n            ctx.rect(x, 0, width, height);\r\n            ctx.fillStyle = color;\r\n        })\r\n    }\r\n\r\n    const weaveDisplayDrawingInstructions = (state: LoomState): DrawingInstruction[] => {\r\n        const instructions : DrawingInstruction[] = [];\r\n        const size = imageCellSize;\r\n        const threadSize = imageCellSize * (imageThreadWidth / 100.);\r\n        const halfThreadSizeDifference = (size - threadSize);\r\n        const hTSD = halfThreadSizeDifference;\r\n\r\n        state.warpThreads.forEach((warpThread, col) => {\r\n            instructions.push(backgroundWarpDrawInstruction((col*size)+hTSD, size-hTSD, state.weftThreads.length*size, warpThread.dataSource.color));\r\n        })\r\n        \r\n        state.weftThreads.forEach((weftThread, row) => {\r\n            // instructions.push(standardWeftDrawInstruction(row*size, state.warpThreads.length*size, size, weftThread.dataSource.color))\r\n            instructions.push(standardWeftDrawInstruction((row*size)+hTSD, state.warpThreads.length*size, size-hTSD, weftThread.dataSource.color))\r\n        })\r\n\r\n        state.treadlingInstructions.forEach((treadle, row) => {\r\n            if(treadle){\r\n                treadle.harnesses.forEach(harness => {\r\n                    harness.threads.forEach(warpThread => {\r\n                        instructions.push(standardWarpDrawInstruction((warpThread.id*size)+hTSD, row*size, size-hTSD, size+hTSD, warpThread.dataSource.color));\r\n                    })\r\n                })\r\n            }\r\n        })\r\n        \r\n        return instructions;\r\n    }\r\n\r\n    const handleDimensionsChange = (dimensions: LoomDimensions) => {\r\n        dispatch({ type: LoomActionType.SET_HARNESSCOUNT, harnessCount: dimensions.harnessCount});\r\n        dispatch({ type: LoomActionType.SET_TREADLECOUNT, treadleCount: dimensions.treadleCount});\r\n        dispatch({ type: LoomActionType.SET_WARPCOUNT, warpCount: dimensions.warpCount});\r\n        dispatch({ type: LoomActionType.SET_WEFTCOUNT, weftCount: dimensions.weftCount});\r\n    }\r\n\r\n    const handleSelectThreadDataSource = (selectedThreadDataSourceIndex: number) => {\r\n        dispatch({ type: LoomActionType.SET_SELECTEDTHREADDATASOURCEINDEX, dataSourceIndex: selectedThreadDataSourceIndex});\r\n    }\r\n\r\n    const handleOnAddThreadDataSource = (threadDataSourceToAdd: ThreadDataSource) => {\r\n        dispatch({ type: LoomActionType.ADD_THREADDATASOURCE, dataSource: threadDataSourceToAdd });\r\n    }\r\n\r\n    const handleSetThreadDataSource = (newthreadDataSource: ThreadDataSource) => {\r\n        dispatch({ type: LoomActionType.SET_SELECTEDTHREADDATASOURCE, dataSource: newthreadDataSource})\r\n    }\r\n\r\n    return (\r\n        <div className=\"LoomEditorContainer\">\r\n            <div className=\"LoomPane\">\r\n                <div className=\"LoomContainer\">\r\n                    <ThreadButtonGrid \r\n                        subGridType={SubGridType.WARPTHREADTABLE}\r\n                        cellSize={{width: imageCellSize, height: (imageCellSize/2.)}}\r\n                        gridValues={state.warpThreads}\r\n                        orientation={Orientation.HORIZONTAL}\r\n                        onClickHandler={loomGridOnClickEventHandler}/>\r\n                    <span className=\"void\">&nbsp;</span>\r\n                    <span className=\"void\">&nbsp;</span>\r\n                    <ButtonGrid \r\n                        subGridType={SubGridType.HARNESSTOTHREADTABLE} \r\n                        cellSize={imageCellSize}\r\n                        gridValues={topGridValues(state.warpThreads, state.harnesses)}\r\n                        onClickHandler={loomGridOnClickEventHandler}/>\r\n                    <ButtonGrid \r\n                        subGridType={SubGridType.TIEUPTABLE} \r\n                        cellSize={imageCellSize}\r\n                        gridValues={tieup(state.harnesses, state.treadles)}\r\n                        onClickHandler={loomGridOnClickEventHandler}/>\r\n                    <span className=\"void\">&nbsp;</span>\r\n                    <WeaveDisplay\r\n                        repetitions={imageScale} \r\n                        dimensions={{x: state.dimensions.warpCount*imageCellSize, y: state.dimensions.weftCount*imageCellSize}}\r\n                        drawingInstructions={weaveDisplayDrawingInstructions(state)}\r\n                        backgroundClearColor={imageBackgroundColor}/>\r\n                    <ButtonGrid\r\n                        subGridType={SubGridType.TREADLINGTABLE}\r\n                        cellSize={imageCellSize}\r\n                        gridValues={rightGridValues(state.treadles, state.treadlingInstructions)}\r\n                        onClickHandler={loomGridOnClickEventHandler}/>\r\n                    <ThreadButtonGrid \r\n                        subGridType={SubGridType.WEFTTHREADTABLE} \r\n                        cellSize={{width: (imageCellSize/2.), height: imageCellSize}}\r\n                        gridValues={state.weftThreads} orientation={Orientation.VERTICAL}\r\n                        onClickHandler={loomGridOnClickEventHandler}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"EditorPanes\">\r\n                <DimensionsEditor\r\n                    dimensions={state.dimensions}\r\n                    onDimensionsChange={handleDimensionsChange}\r\n                    />\r\n                <ImageEditor>\r\n                    <form className=\"ImageEditorForm\">\r\n                        <label style={{verticalAlign: \"top\"}} htmlFor=\"cellSize\">cell size </label>\r\n                        <input type=\"range\" min=\"2\" max=\"16\" defaultValue=\"16\" id=\"cellSizeSlider\" onChange={({target}) => setImageCellSize(parseInt(target.value))}/><br/>\r\n\r\n                        <label style={{verticalAlign: \"top\"}} htmlFor=\"scaleSlider\">scale </label>\r\n                        <input type=\"range\" min=\"1\" max=\"16\" defaultValue=\"1\" id=\"scaleSlider\" onChange={({target}) => setImageScale(parseInt(target.value))}/><br/>\r\n\r\n                        <label style={{verticalAlign: \"top\"}} htmlFor=\"threadWidthSlider\">thread width </label>\r\n                        <input type=\"range\" min=\"0\" max=\"100\" defaultValue=\"100\" id=\"threadWidthSlider\" onChange={({target}) => setImageThreadWidth(parseInt(target.value))}/><br/>\r\n\r\n                        <label style={{verticalAlign: \"top\"}} htmlFor=\"threadWidthSlider\">background color </label>\r\n                        <input type=\"color\" defaultValue=\"#000000\" id=\"background\" className=\"ColorPicker\" onChange={({target}) => setImageBackgroundColor((target.value))}/><br/>\r\n\r\n                    </form>\r\n                </ImageEditor>\r\n                <ThreadEditor\r\n                    onSelectThreadDataSource={handleSelectThreadDataSource}\r\n                    onSetThreadDataSource={handleSetThreadDataSource}\r\n                    onAddThreadDataSource={handleOnAddThreadDataSource}\r\n                    indexedThreadPalette={state.indexedThreadPalette}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loom;\r\n","import './ToolBarMenu.css';\r\n\r\n// interface ToolBarMenuProps {\r\n//     name: string,\r\n//     children: JSX.Element[]\r\n// }\r\n\r\nconst ToolBarMenu = (props: any) => {\r\n\r\n\r\n    return (\r\n        <div className=\"ToolBarMenu\">\r\n        <div className=\"ToolBarMenuName\">{props.name}</div>\r\n        <div className=\"ToolBarMenuChildren\">\r\n            {props.children}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToolBarMenu;","import { ReactNode } from \"react\";\r\nimport './ToolBarMenuNode.css'\r\n\r\n// interface ToolBarMenuNodeProps {\r\n//     children: ReactNode[];\r\n//     text: string\r\n// }\r\n\r\nconst ToolBarMenuNode = (props: any) => {\r\n    return (\r\n        <div onClick={props.onClick} className={props.className ? props.className : \"ToolBarMenuNode\"}>\r\n            <span>{props.text}</span>\r\n            <div className={\"ToolBarMenuSubNodes \"+ (props.children ? \"populated\" : \"\")}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToolBarMenuNode;","import { LoomStateStringRepresentation } from \"../types\";\r\n\r\nexport const patterns : Array<LoomStateStringRepresentation> = [\r\n    {\r\n      name: \"Basic Twill\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Periwinkle\",\r\n      data: {\r\n        threading:  \"3,2,1,4,3,2,1,4,3,4,3,2,3,2,1,4,3,4,1,2,3,2,3,4,3,4,1,2\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,2,1,4x3,3x3,2,1,4x2,1,2,3x3,4x3,1,2,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Diadem\",\r\n      data: {\r\n        threading:  \"4,1,2,3,4,1,2,3,4,1,2,3,2,3,2,1,4,3,4,3,4,1,2,3,2,3,2,1,4,3,2,1,4,3,2,1,4,1\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3x2,4,1,2,3,4,1,2,3,4,1x4,4,3,2x4,3,4,1x4,4,3,2,1,4,3,2,1,4,3x2\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Rings and Chains\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,4,1,4,3,4,3,2,3,2,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,2,3,2,3,4,3,4,1,4,1,4,3,2,1,4,1,2,3,4\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"1,2,3,4,1x4,4x3,3x3,2x3,1x2,2x2,1x2,2x2,1x2,2x2,1x2,2x2,1x2,2x2,1x2,2x3,3x3,4x3,1x4,4,3,2,1\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Wheel of Fortune\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,1,2,3,2,3,4,3,4,1,4,3,4,1,4,3,4,3,2,3,2,1,2,1,4,3,2,1,4,3,2,1,4,3,2,3,2,1,2,1,4,1,4,3,4,1,4,3,4,1,4,1,2,1,2,3,2,3,4,1,2,3,4\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"2,3,4,1,2x3,3x3,4x3,1x2,4x2,1x2,4x3,3x3,2x3,1,4,3,2,1,4,3,2,1,4,3x3,2x3,1x3,4x2,1x2,4x2,1x3,2x3,3x3,4,1,2,3,4,1\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Chariot Wheel No. 3\",\r\n      data: {\r\n        threading:  \"4,3,2,1,4,3,2,3,4,3,2,3,4,1,4,1,4,1,2,1,2,1,4,1,2,1,4,1,2,1,2,1,4,1,4,1,4,3,2,3,4,3,2,3,4,1,2,3\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"4,3,2,1,4,3x2,4x2,3x2,4,1x5,2x4,1x2,2x2,1x2,2x4,1x5,4,3x2,4x2,3x2,4,1,2,3,4\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Chariot Wheel No. 3 Alt\",\r\n      data: {\r\n        threading:  \"4,3,2,1,4,3,2,3,4,3,2,3,4,1,4,1,4,1,2,1,2,1,4,1,2,1,4,1,2,1,2,1,4,1,4,1,4,3,2,3,4,3,2,3,4,1,2,3\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,4,1,2,3,4x2,3x2,4x2,3,2x5,1x4,2x2,1x2,2x2,1x4,2x5,3,4x2,3x2,4x2,3,2,1,4,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Church Windows\",\r\n      data: {\r\n        threading:  \"3,2,1,4,3,4,3,4,1,4,1,2,1,4,1,4,3,4,3,4,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,4,3,4,3,4,1,4,1,2,1,4,1,4,3,4,3,4,2,1\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,2,1,4x4,1x3,2x2,1x3,4x4,1,2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2,1,4x4,1x3,2x2,1x3,4x4,1,2,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Cambridge Beauty\",\r\n      data: {\r\n        threading:  \"2,3,4,1,4,1,4,1,4,3,4,3,4,3,2,3,2,3,2,1,2,1,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,1,2,1,2,3,2,3,2,3,4,3,4,3,4,1,4,1,4,1,4,3\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,4,1x6,4x5,3x5,2x6,3,4x2,3,2x2,3,4x2,3,2x2,3,4x2,3,2x2,3,4x2,3,2x2,3,4x2,3,2x6,3x5,4x5,1x6,4,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Star of Bethlehem\",\r\n      data: {\r\n        threading:  \"2,3,4,1,2,3,4,1,2,3,4,1,2,1,2,3,2,3,4,3,4,1,4,1,2,3,4,1,4,3,2,1,4,1,4,3,4,3,2,3,2,1,2,1,4,3,2,1\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"2,3,4,1,2,3,4,1,2,3,4,1,2x3,3x3,4x3,1x3,1,2,3,4,1x2,4,3,2,1x3,4x3,3x3,2x3,1,4,3,2\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Maltese Cross\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,2,1,4,1,4,3,4,3,2,3,2,1,2,1,4,1,2,1,4,1,2,1,2,3,2,3,4,3,4,1,4,1,2,1,4,3,2\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"2,1,4,3,2,1,4,3,2x2,3x3,4x3,1x3,2x3,3x2,2x2,3x2,2x3,1x3,4x3,3x3,2x2,3,4,1,2\"\r\n      }\r\n    }\r\n  ]\r\n  ","import { LoomState, LoomStateDict, LoomStateStringRepresentation, SerializedLoomState } from \"../../types\";\r\nimport { createLoomStateFromStringDataRepesentation } from \"../../utils\";\r\nimport ToolBarMenu from \"../ToolBarMenu/ToolBarMenu\";\r\nimport ToolBarMenuNode from \"../ToolBarMenuNode/ToolBarMenuNode\";\r\nimport {patterns as presetPatterns} from '../../presets/presetWeavingPatterns'\r\n\r\ninterface ToolBarProps {\r\n    saveStateDict: LoomStateDict,\r\n    saveStateNames: {[id: string]: string}\r\n    onLoad: (stateID: string) => void,\r\n    onSaveAs: (...args: any) => void,\r\n    onSave: (...args: any) => void,\r\n    onLoadPreset: (state: LoomState) => void,\r\n    onCreateNew: (...args: any) => void\r\n}\r\n\r\nconst ToolBar = (props: ToolBarProps) => {\r\n    //serializedState: SerializedLoomState\r\n    const stateIDAsToolBarMenuNode = (id: string) => {\r\n        return <ToolBarMenuNode \r\n                    className=\"ToolBarMenuSubNode\"\r\n                    text={props.saveStateNames[id]}\r\n                    onClick={() => props.onLoad(id)}/>\r\n    }\r\n\r\n    const saveStateToolBarMenuNodes : React.ReactNode[] = Object.keys(props.saveStateDict).map((stateID : string) => {\r\n        return stateIDAsToolBarMenuNode(stateID);\r\n    })\r\n\r\n    const presetStateAsToolBarMenuNode = (state: LoomState) => {\r\n        return <ToolBarMenuNode\r\n                    className=\"ToolBarMenuSubNode\"\r\n                    text={state.name}\r\n                    onClick={() => props.onLoadPreset(state)}/>\r\n    }\r\n\r\n    const presetStateToolBarMenuNodes = (stateStrings : Array<LoomStateStringRepresentation>) : React.ReactNode[] => {\r\n        return stateStrings\r\n                .map(stateString => createLoomStateFromStringDataRepesentation(stateString))\r\n                .map((state, i) => presetStateAsToolBarMenuNode(state));\r\n    }\r\n    \r\n    return (\r\n        <ToolBarMenu name={\"File\"}>\r\n            <ToolBarMenuNode\r\n                text=\"Create New\"\r\n                onClick={props.onCreateNew}\r\n                />\r\n            <ToolBarMenuNode\r\n                text=\"Save\"\r\n                onClick={props.onSave}\r\n                />\r\n            <ToolBarMenuNode\r\n                text=\"Save As\"\r\n                onClick={props.onSaveAs}\r\n                />\r\n            <ToolBarMenuNode\r\n                text=\"Load\">\r\n                {[...saveStateToolBarMenuNodes]}\r\n            </ToolBarMenuNode>\r\n            <ToolBarMenuNode\r\n                text=\"Load Preset\">\r\n                {[...presetStateToolBarMenuNodes(presetPatterns)]}\r\n            </ToolBarMenuNode>\r\n        </ToolBarMenu>\r\n    )\r\n}\r\n\r\nexport default ToolBar;","import { useEffect, useState } from 'react'\r\n\r\n\r\nfunction useLocalStorage<T>(\r\n\r\n  key: string,\r\n\r\n  initialValue: T,\r\n\r\n): [T, (value: T) => void] {\r\n\r\n  // Get from local storage then\r\n\r\n  // parse stored json or return initialValue\r\n\r\n  const readValue = () => {\r\n\r\n    // Prevent build error \"window is undefined\" but keep keep working\r\n\r\n    if (typeof window === 'undefined') {\r\n\r\n      return initialValue\r\n\r\n    }\r\n\r\n\r\n    try {\r\n\r\n      const item = window.localStorage.getItem(key)\r\n\r\n      return item ? JSON.parse(item) : initialValue\r\n\r\n    } catch (error) {\r\n\r\n      console.warn(`Error reading localStorage key “${key}”:`, error)\r\n\r\n      return initialValue\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // State to store our value\r\n\r\n  // Pass initial state function to useState so logic is only executed once\r\n\r\n  const [storedValue, setStoredValue] = useState<T>(readValue)\r\n\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n\r\n  // ... persists the new value to localStorage.\r\n\r\n  const setValue = (value: T) => {\r\n\r\n    // Prevent build error \"window is undefined\" but keeps working\r\n\r\n    if (typeof window == 'undefined') {\r\n\r\n      console.warn(\r\n\r\n        `Tried setting localStorage key “${key}” even though environment is not a client`,\r\n\r\n      )\r\n\r\n    }\r\n\r\n\r\n    try {\r\n\r\n      // Allow value to be a function so we have the same API as useState\r\n\r\n      const newValue = value instanceof Function ? value(storedValue) : value\r\n\r\n\r\n      // Save to local storage\r\n\r\n      window.localStorage.setItem(key, JSON.stringify(newValue))\r\n\r\n\r\n      // Save state\r\n\r\n      setStoredValue(newValue)\r\n\r\n\r\n      // We dispatch a custom event so every useLocalStorage hook are notified\r\n\r\n      window.dispatchEvent(new Event('local-storage'))\r\n\r\n    } catch (error) {\r\n\r\n      console.warn(`Error setting localStorage key “${key}”:`, error)\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    setStoredValue(readValue())\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const handleStorageChange = () => {\r\n\r\n      setStoredValue(readValue())\r\n\r\n    }\r\n\r\n\r\n    // this only works for other documents, not the current one\r\n\r\n    window.addEventListener('storage', handleStorageChange)\r\n\r\n\r\n    // this is a custom event, triggered in writeValueToLocalStorage\r\n\r\n    window.addEventListener('local-storage', handleStorageChange)\r\n\r\n\r\n    return () => {\r\n\r\n      window.removeEventListener('storage', handleStorageChange)\r\n\r\n      window.removeEventListener('local-storage', handleStorageChange)\r\n\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n  }, [])\r\n\r\n\r\n  return [storedValue, setValue]\r\n\r\n}\r\n\r\n\r\nexport default useLocalStorage","import './Dialog.css'\r\n\r\nconst Dialog = (props: any) => {\r\n    return (\r\n        <div className=\"DialogContainer\">\r\n            <div className=\"DialogBox\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import './Container.scss';\r\nimport Loom from '../LoomEditor/LoomEditor';\r\n// import { SaveLoadMenu } from '../SaveLoadMenu/SaveLoadMenu';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { LoomState, LoomStateDict, SerializedLoomState } from '../../types';\r\nimport ToolBarFileMenu from '../ToolBar/ToolBar';\r\nimport ToolBar from '../ToolBar/ToolBar';\r\nimport useLocalStorage from '../../Hooks/useLocalStorage';\r\nimport { convertJSONToLoomState, convertLoomStateToJSON, createLoomState, createUUID, dimensionDefault } from '../../utils';\r\nimport { reduceEachLeadingCommentRange } from 'typescript';\r\nimport Dialog from '../Dialog/Dialog';\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\n\r\nconst Container = () => {\r\n    const [saveStateDict, setSaveStateDict] = useLocalStorage<LoomStateDict>('saveStates', {});\r\n    const [saveStateNames, setSaveStateNames] = useLocalStorage<{[id: string]: string}>('saveStateNames', {});\r\n    const initialState : LoomState = createLoomState(dimensionDefault);\r\n    const [currentState, setCurrentState] = useState<LoomState>(initialState);\r\n    const [openDialog, setOpenDialog] = useState<boolean>(false);\r\n    const [currentDialog, setCurrentDialog] = useState<JSX.Element>();\r\n    const [liveStateRef, setLiveStateRef] = useState<LoomState>(currentState);\r\n\r\n    const updateLiveStateRef = (ref: LoomState) => {\r\n        setLiveStateRef(ref);\r\n    }\r\n\r\n    // save new state to state ref with ID\r\n    const handleSave = () => {\r\n        const serializedLoomState: SerializedLoomState = convertLoomStateToJSON(liveStateRef); \r\n        setSaveStateDict({...saveStateDict, [liveStateRef.id]: serializedLoomState});\r\n        setSaveStateNames({...saveStateNames, [liveStateRef.id]: liveStateRef.name});\r\n    }\r\n\r\n    // push new state with newly generated uuid with new name\r\n\r\n    // DIALOGS - CLICK OPENS\r\n    const handleSaveAsClickOpen = () => {\r\n        setCurrentDialog(SaveAsDialog);\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const handleCreateNewClickOpen = () => {\r\n        setCurrentDialog(CreateNewDialog);\r\n        setOpenDialog(true);\r\n    }\r\n    //\r\n\r\n    // DIALOG HANDLERS\r\n    const handleCreateNew = (e: any) => {\r\n        setOpenDialog(false);\r\n        e.preventDefault();\r\n        \r\n        const newState = createLoomState(dimensionDefault);\r\n        const newName = e.target[\"fileName\"].value;\r\n        newState.name = newName;\r\n        setCurrentState(newState);\r\n    }\r\n\r\n    const handleSaveAs = (e: any) => {\r\n        setOpenDialog(false);\r\n        e.preventDefault();\r\n        \r\n        const newUUID = createUUID();\r\n        const stateClone = cloneDeep(liveStateRef);\r\n        const newName = e.target[\"newFileName\"].value;\r\n        stateClone.name = newName;\r\n        stateClone.id = newUUID;\r\n        \r\n        const serilizedState : SerializedLoomState = convertLoomStateToJSON(liveStateRef);\r\n        setSaveStateDict({...saveStateDict, [newUUID]: serilizedState});\r\n        setSaveStateNames({...saveStateNames, [stateClone.id]: stateClone.name});\r\n        setCurrentState(stateClone);\r\n    }\r\n    //\r\n\r\n    const handleClose = () => {\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    const handleLoad = (stateID: string) => {\r\n        const serializedState : SerializedLoomState = saveStateDict[stateID];\r\n        const state : LoomState = convertJSONToLoomState(serializedState);\r\n        setCurrentState(state);\r\n    }\r\n\r\n    const handleLoadPreset = (state: LoomState) => {\r\n        setCurrentState(state);\r\n    }\r\n\r\n\r\n    const SaveAsDialog = (\r\n        <Dialog>\r\n            <form className=\"w100\" onSubmit={handleSaveAs}>\r\n                <div className=\"w100\">\r\n                    <span>New file name:</span>\r\n                    <input type=\"text\" name=\"newFileName\" className=\"underline w100\" placeholder={liveStateRef.name}></input>\r\n                </div>\r\n                <div className=\"w100\" style={{\"marginTop\":\"1em\"}}>\r\n                    <button className=\"cancelBtn\" style={{\"width\":\"50%\"}} onClick={handleClose}>Cancel</button>\r\n                    <button type=\"submit\" className=\"saveBtn\" style={{\"width\":\"50%\"}}>Save</button>\r\n                </div>\r\n            </form>\r\n        </Dialog>\r\n    )\r\n\r\n    const CreateNewDialog = (\r\n        <Dialog>\r\n            <form className=\"w100\" onSubmit={handleCreateNew}>\r\n                <div className=\"w100\">\r\n                    <span>File name:</span>\r\n                    <input type=\"text\" name=\"fileName\" className=\"underline w100\" placeholder=\"untitled\"></input>\r\n                </div>\r\n                <div className=\"w100\" style={{\"marginTop\":\"1em\"}}>\r\n                    <button className=\"cancelBtn\" style={{\"width\":\"50%\"}} onClick={handleClose}>Cancel</button>\r\n                    <button type=\"submit\" className=\"saveBtn\" style={{\"width\":\"50%\"}}>Create</button>\r\n                </div>\r\n            </form>\r\n        </Dialog>\r\n    )\r\n\r\n    return (\r\n        <div className=\"Container\">\r\n            <ToolBar\r\n                saveStateDict={saveStateDict}\r\n                saveStateNames={saveStateNames}\r\n                onCreateNew={handleCreateNewClickOpen}\r\n                onLoad={handleLoad}\r\n                onLoadPreset={handleLoadPreset}\r\n                onSaveAs={handleSaveAsClickOpen}\r\n                onSave={handleSave}/>\r\n            <Loom\r\n                currentState={currentState}\r\n                onChange={updateLiveStateRef}/>\r\n            {openDialog && currentDialog}\r\n            {/* Dialog if Save As or Create New are selected in the file menu */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","import React from 'react';\nimport Container from '../Container/Container';\nimport './App.css';\nimport '../../Styles/typography.scss';\nimport '../../Styles/form.scss';\nimport '../../Styles/layout.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container></Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}