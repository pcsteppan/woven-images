{"version":3,"sources":["types/index.ts","Components/WeaveDisplay/WeaveDisplay.tsx","Components/Button/Button.tsx","Components/ButtonGrid/ButtonGrid.tsx","utils/index.ts","Components/DimensionsEditor/DimensionsEditor.tsx","presets/presetWeavingPatterns.tsx","Components/SaveLoadMenu/SaveLoadMenu.tsx","Components/ThreadEditor/ThreadEditor.tsx","Components/ThreadButtonGrid/ThreadButtonGrid.tsx","Components/LoomEditor/LoomEditor.tsx","Components/Container/Container.tsx","Components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["SubGridType","Orientation","ContainerActionType","LoomActionType","WeaveDisplay","props","canvasRef","useRef","canvasCtxRef","React","useEffect","current","getContext","ctx","clearRect","width","height","drawingInstructions","forEach","instruction","beginPath","fill","pattern","createPattern","setTransform","DOMMatrix","scaleSelf","repetitions","fillStyle","fillRect","className","dimensions","x","y","ref","Button","style","gridRow","row","gridColumn","col","thread","dataSource","color","console","log","value","onClick","onClickHandler","ButtonGrid","handleButtonClick","e","subGridType","arrayOfButtons","gridValues","map","rowIndex","colIndex","cellSize","gridTemplateRows","length","gridTemplateColumns","cloneDeep","require","defaultWarpThreadColor","defaultWeftThreadColor","defaultWarpThread","id","defaultWeftThread","createHarness","threads","Set","createTreadle","harnesses","createThread","loomDimensionsFromString","obj","data","threading","tieup","treadling","tieupNumbers","str","regex","matches","match","s","parseInt","numbersFromString","Math","max","warpCount","split","weftCount","expandPatternString","treadleCount","harnessCount","newStr","replaceAll","p1","p2","repeat","endsWith","substring","createThreadDataSource","createLoomState","Array","_","warpThreads","i","weftThreads","treadles","treadlingInstructions","threadDataSource","weaveScalar","name","indexedThreadPalette","defaultIndexedThreadPalette","threadPalette","selectedIndex","DimensionsEditor","useState","localDimensions","setLocalDimensions","handleChange","preventDefault","target","formItems","Object","keys","dimensionKey","htmlFor","separator","replace","toLowerCase","display","type","onChange","placeholder","toString","onSubmit","onDimensionsChange","verticalAlign","min","defaultValue","weaveDisplayScalarOnChange","patterns","SaveLoadMenu","stateStrings","states","saveStates","setSaveStates","stateAsListItem","state","index","handleOverwriteSave","onLoadSave","saveStatesCopy","currentState","presetPatterns","stateString","harnessIndex","warpThreadIndex","add","treadleConnections","harnessIndexes","treadleIndex","inverseHarnessIndex","treadlingInstructionIndex","createLoomStateFromStringDataRepesentation","ThreadEditor","newThreadDataSource","setNewThreadDataSource","paletteLock","setPaletteLock","threadItems","classes","backgroundColor","onSelectThreadDataSource","onAddThreadDataSource","onSetThreadDataSource","ThreadButtonGrid","buttonOnClickHandler","item","styleDataSource","orientation","HORIZONTAL","VERTICAL","reducer","action","stateCopy","SET_HARNESSTOTHREADATTACHMENTS","harness","harnessID","threadID","has","delete","SET_TREADLETOHARNESSATTACHMENTS","treadle","treadleID","SET_TREADLINGINSTRUCTION","instructionIndex","SET_HARNESSCOUNT","unshift","removedHarnesses","splice","SET_TREADLECOUNT","push","removedTreadles","removedTreadle","SET_WARPCOUNT","wt","SET_WEFTCOUNT","SET_CELLSIZE","SET_STATE","newState","SET_WARPTHREADDATASOURCE","warpThreadID","SET_WEFTTHREADDATASOURCE","weftThreadID","SET_SELECTEDTHREADDATASOURCE","SET_SCALAR","scalar","ADD_THREADDATASOURCE","SET_SELECTEDTHREADDATASOURCEINDEX","dataSourceIndex","initialState","Loom","useReducer","dispatch","loomGridOnClickEventHandler","gridCol","HARNESSTOTHREADTABLE","TIEUPTABLE","TREADLINGTABLE","WEFTTHREADTABLE","WARPTHREADTABLE","instructions","size","weftThread","rect","warpThread","standardWarpDrawInstruction","weaveDisplayDrawingInstructions","weaveDisplayScalar","selectedThreadDataSourceIndex","newthreadDataSource","threadDataSourceToAdd","Container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c477fdf4.chunk.js","sourcesContent":["import { CSSProperties } from \"react\"\r\n\r\nexport enum SubGridType {\r\n  WARPTHREADTABLE,\r\n  WEFTTHREADTABLE,\r\n  TIEUPTABLE,\r\n  HARNESSTOTHREADTABLE,\r\n  TREADLINGTABLE \r\n}\r\n\r\nexport enum Orientation {\r\n  VERTICAL,\r\n  HORIZONTAL\r\n}\r\n\r\nexport enum ContainerActionType {\r\n  SET_WARPCOUNT,\r\n  SET_WEFTCOUNT,\r\n  SET_TREADLECOUNT,\r\n  SET_HARNESSCOUNT\r\n}\r\n  \r\nexport type ContainerAction =\r\n| { type: ContainerActionType.SET_WARPCOUNT; warpCount: number;}\r\n| { type: ContainerActionType.SET_WEFTCOUNT; weftCount: number;}\r\n| { type: ContainerActionType.SET_TREADLECOUNT; treadleCount: number;}\r\n| { type: ContainerActionType.SET_HARNESSCOUNT; harnessCount: number;}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport enum LoomActionType {\r\n    SET_HARNESSTOTHREADATTACHMENTS,\r\n    SET_TREADLETOHARNESSATTACHMENTS,\r\n    SET_TREADLINGINSTRUCTION,\r\n    SET_HARNESSCOUNT,\r\n    SET_TREADLECOUNT,\r\n    SET_WEFTCOUNT,\r\n    SET_WARPCOUNT,\r\n    SET_CELLSIZE,\r\n    SET_STATE,\r\n    SET_WARPTHREADDATASOURCE,\r\n    SET_WEFTTHREADDATASOURCE,\r\n    SET_SELECTEDTHREADDATASOURCEINDEX,\r\n    SET_SELECTEDTHREADDATASOURCE,\r\n    SET_SCALAR,\r\n    ADD_THREADDATASOURCE,\r\n    OVERWRITE_SAVE\r\n}\r\n\r\nexport type LoomAction =\r\n| { type: LoomActionType.SET_HARNESSTOTHREADATTACHMENTS; harnessID: number; threadID: number; }\r\n| { type: LoomActionType.SET_TREADLETOHARNESSATTACHMENTS; treadleID: number; harnessID: number; }\r\n| { type: LoomActionType.SET_TREADLINGINSTRUCTION; treadleID: number; instructionIndex: number; }\r\n| { type: LoomActionType.SET_HARNESSCOUNT; harnessCount: number; }\r\n| { type: LoomActionType.SET_TREADLECOUNT; treadleCount: number; }\r\n| { type: LoomActionType.SET_WARPCOUNT; warpCount: number; }\r\n| { type: LoomActionType.SET_WEFTCOUNT; weftCount: number; }\r\n| { type: LoomActionType.SET_CELLSIZE; cellSize: number; }\r\n| { type: LoomActionType.SET_STATE; state: LoomState; }\r\n| { type: LoomActionType.SET_WARPTHREADDATASOURCE; warpThreadID: number; }\r\n| { type: LoomActionType.SET_WEFTTHREADDATASOURCE; weftThreadID: number; }\r\n| { type: LoomActionType.SET_SELECTEDTHREADDATASOURCEINDEX; dataSourceIndex: number; }\r\n| { type: LoomActionType.ADD_THREADDATASOURCE; dataSource: ThreadDataSource; }\r\n| { type: LoomActionType.SET_SELECTEDTHREADDATASOURCE; dataSource: ThreadDataSource; }\r\n| { type: LoomActionType.SET_SCALAR; scalar: number; }\r\n\r\nexport type LoomDimensions = {\r\n  [property: string]: number\r\n}\r\n\r\nexport type LoomState = {\r\n  name: string;\r\n  dimensions: LoomDimensions;\r\n  harnesses: Harness[];\r\n  warpThreads: Thread[];\r\n  weftThreads: Thread[];\r\n  treadles: Treadle[];\r\n  treadlingInstructions: (Treadle | null)[];\r\n  threadDataSource: ThreadDataSource;\r\n  indexedThreadPalette: IndexedThreadPalette\r\n  weaveScalar: number;\r\n}\r\n\r\nexport type LoomStateStringRepresentation = {\r\n  name: string,\r\n  data: {\r\n    threading:  string,\r\n    tieup:      string,\r\n    treadling:  string\r\n  }\r\n}\r\n\r\nexport type Harness = {\r\n  threads: Set<Thread>\r\n}\r\n\r\nexport type Treadle = {\r\n  harnesses: Set<Harness>\r\n}\r\n\r\nexport type Thread = {\r\n  id: number\r\n  dataSource: ThreadDataSource\r\n}\r\n\r\nexport type ThreadDataSource = {\r\n  color: Color\r\n}\r\n\r\nexport type IndexedThreadPalette = {\r\n  threadPalette: ThreadDataSource[];\r\n  selectedIndex: number\r\n}\r\n\r\nexport type Color = string\r\n\r\nexport type DrawingInstruction = (ctx: CanvasRenderingContext2D) => void\r\n\r\n// type DrawInstructions = {\r\n//   // [instructionName: string] : (arg0: value) => value;\r\n// }\r\n\r\n// type Filter = {\r\n//   [propertyName: string] : (arg0: number) => number;\r\n// }\r\n\r\n// const apply = (f: Filter, DI: DrawInstructions) {\r\n \r\n// }\r\n\r\n// const a: Filter = {\r\n//   'red' : (v) => v*2,\r\n//   'blue' : (v) => v*2,\r\n//   'green' : (v) => v*1.5\r\n// }\r\n\r\n// // function which contains calls to argument\r\n// function draw(ctx: CanvasRenderingContext2D) {\r\n  \r\n//   ctx.rect(0,0,10,10);\r\n// }\r\n\r\n","import React from \"react\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { DrawingInstruction } from \"../../types\";\r\nimport './WeaveDisplay.css';\r\n\r\ninterface WeaveDisplayProps { \r\n    dimensions: { x: number; y: number; }; \r\n    drawingInstructions: DrawingInstruction[];\r\n    repetitions: number;\r\n}\r\n\r\nconst WeaveDisplay = (props: WeaveDisplayProps) => {\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    const canvasCtxRef = React.useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n    useEffect(() => {\r\n    // Initialize\r\n        if (canvasRef.current) {\r\n            canvasCtxRef.current = canvasRef.current.getContext('2d');\r\n            let ctx = canvasCtxRef.current; // Assigning to a temp variable\r\n            ctx!.clearRect(0,0,canvasRef.current.width,canvasRef.current.height);\r\n            \r\n            // Note the Non Null Assertion\r\n            // ctx!.arc(95, 50, 40, 0, 2 * Math.PI);\r\n            // ctx!.rect(0,0,100,100);\r\n            \r\n            props.drawingInstructions.forEach(instruction => {\r\n                if(ctx){\r\n                    ctx.beginPath();\r\n                    instruction(ctx);\r\n                    ctx.fill();\r\n                }\r\n            })\r\n\r\n            if(ctx) {\r\n                const pattern = ctx.createPattern(canvasRef.current, 'repeat');\r\n                pattern?.setTransform(new DOMMatrix().scaleSelf(1/props.repetitions, 1/props.repetitions, 0, 0));\r\n                if(pattern){\r\n                    ctx.fillStyle = pattern;\r\n                    ctx.fillRect(0,0,canvasRef.current.width,canvasRef.current.height);\r\n                }\r\n            }\r\n        }\r\n    }, [props]);\r\n    \r\n\r\n    return <canvas className=\"Canvas\" width={props.dimensions.x} height={props.dimensions.y} ref={canvasRef}/>\r\n}\r\n\r\nexport default WeaveDisplay;","import { threadId } from 'node:worker_threads';\r\nimport React, { CSSProperties, MouseEventHandler } from 'react';\r\nimport { Thread, ThreadDataSource } from '../../types';\r\nimport './Button.css';\r\n\r\ninterface ButtonProps {\r\n    styleDataSource?: ThreadDataSource,\r\n    value?: boolean,\r\n    row: number,\r\n    col: number,\r\n    cellSize: number | {width: number, height: number},\r\n    thread?: Thread,\r\n    onClickHandler: (e: React.MouseEvent<HTMLDivElement>) => void;\r\n}\r\n\r\nconst Button = (props: ButtonProps) => {\r\n    const style : CSSProperties = {\r\n        gridRow: props.row+1,\r\n        gridColumn: props.col+1\r\n    }\r\n\r\n    if(props.thread) {\r\n        style[\"backgroundColor\"] = props.thread.dataSource.color;\r\n        console.log(style);\r\n    }\r\n\r\n    return <div className={\"button \" + (props.value ? \"isActive\" : \"\")}\r\n                style={style}\r\n                onClick={props.onClickHandler}></div>\r\n}\r\n\r\nexport default Button;","import React, { Dispatch, MouseEventHandler, SetStateAction } from 'react';\r\nimport { SubGridType } from '../../types';\r\nimport Button from '../Button/Button';\r\nimport './ButtonGrid.scss';\r\n\r\ninterface ButtonGridProps {\r\n    gridValues: boolean[][]; \r\n    // setGridValues: Dispatch<SetStateAction<boolean[][]>>;\r\n    cellSize: number;\r\n    subGridType: SubGridType;\r\n    onClickHandler: (e: React.MouseEvent<HTMLDivElement>, type: SubGridType) => void;\r\n}\r\n\r\nconst ButtonGrid = (props: ButtonGridProps) => {\r\n\r\n    const handleButtonClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n        props.onClickHandler(e, props.subGridType);\r\n    }\r\n\r\n    const arrayOfButtons = props.gridValues.map((row, rowIndex) => {\r\n        return row.map((value, colIndex) => {\r\n            return <Button value={value}\r\n                           row={rowIndex}\r\n                           col={colIndex}\r\n                           cellSize={props.cellSize}\r\n                           onClickHandler={handleButtonClick}/>\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div className=\"ButtonGrid\"\r\n             style={{gridTemplateRows: `repeat(1fr, ${props.gridValues.length})`,\r\n                     gridTemplateColumns: `repeat(1fr, ${props.gridValues[0].length})`,\r\n                     width: `${props.gridValues[0].length*props.cellSize}px`,\r\n                     height: `${props.gridValues.length*props.cellSize}px`}}>\r\n            {arrayOfButtons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonGrid;","import { Harness, IndexedThreadPalette, LoomDimensions, LoomState, LoomStateStringRepresentation, Thread, ThreadDataSource, Treadle } from \"../types\";\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\nexport const dimensionDefault : LoomDimensions = {\r\n    harnessCount: 4,\r\n    treadleCount: 4,\r\n    warpCount: 16,\r\n    weftCount: 16,\r\n    cellSize: 16\r\n}\r\n\r\nexport const defaultWarpThreadColor = \"#FFFFFF\";\r\nexport const defaultWeftThreadColor = \"#000000\";\r\n\r\nexport const defaultWarpThread : Thread = {\r\n    id: 0,\r\n    dataSource: {\r\n        color: defaultWarpThreadColor\r\n    }\r\n}\r\n\r\nexport const defaultWeftThread : Thread = {\r\n    id: 0,\r\n    dataSource: {\r\n        color: defaultWeftThreadColor\r\n    }\r\n}\r\n\r\nexport function decamelize(str: string, separator: string){\r\n    separator = typeof separator === 'undefined' ? '_' : separator;\r\n    \r\n    return str\r\n    .replace(/([a-z\\d])([A-Z])/g, '$1' + separator + '$2')\r\n    .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1' + separator + '$2')\r\n    .toLowerCase();\r\n}\r\n\r\nexport const createHarness = () : Harness => {\r\n    return { threads: new Set<Thread>() } \r\n}\r\n\r\nexport const createTreadle = () : Treadle => {\r\n    return { harnesses: new Set<Harness>() } \r\n}\r\n\r\nexport const createThread = (id: number, color: string) : Thread => {\r\n    return {\r\n        id,\r\n        dataSource: {\r\n            color\r\n        }\r\n    }\r\n}\r\n\r\n// export function arrayDimensionsFromString(str: String) : {rows: number, cols: number} {\r\n//     let min = Number.MAX_VALUE;\r\n//     let max = Number.MIN_VALUE;\r\n//     let sepStr = str.split(\",\");\r\n//     let length = 0;\r\n//     sepStr.forEach(substring => {\r\n//         if(substring.includes(\"-\")) {\r\n//             substring.split(\"-\").forEach(num => {\r\n//                 min = Math.min(min, parseInt(num));\r\n//                 max = Math.max(max, parseInt(num));\r\n//             })\r\n//         } else {\r\n//             min = Math.min(min, parseInt(substring));\r\n//             max = Math.max(max, parseInt(substring));\r\n//         }\r\n//         length += 1;\r\n//     })\r\n//     const numCols = length;\r\n//     const numRows = max-min;\r\n//     return {\r\n//         rows: numRows+1,\r\n//         cols: numCols,\r\n//     }\r\n// }\r\n\r\nexport function loomDimensionsFromString(obj: LoomStateStringRepresentation) : LoomDimensions {\r\n    const {threading, tieup, treadling} = obj.data;\r\n    const tieupNumbers : number[] = numbersFromString(tieup);\r\n    console.log(Math.max(...tieupNumbers));\r\n    return {\r\n        warpCount: threading.split(',').length,\r\n        weftCount: expandPatternString(treadling).split(',').length,\r\n        treadleCount: tieup.split(',').length,\r\n        harnessCount: Math.max(...tieupNumbers),\r\n        cellSize: 12\r\n    }\r\n}\r\n\r\nfunction expandPatternString(str: string) : string {\r\n    // 1x4 = 1,1,1,1,\r\n    const regex = /(\\d+)x(\\d+)/g;\r\n    let newStr = str.replaceAll(regex, (match, p1, p2) => {\r\n        const newSubstring = (p1+\",\").repeat(p2)\r\n        return newSubstring\r\n    })\r\n    \r\n    newStr = newStr.replaceAll(/,,/g, \",\")\r\n    if (newStr.endsWith(\",\")) \r\n        newStr = newStr.substring(0, newStr.length-1);\r\n    \r\n    return newStr;\r\n}\r\n\r\nfunction numbersFromString(str: string) : number[] {\r\n    const regex = /(\\d+)/g;\r\n    const matches = str.match(regex);\r\n    return matches ? \r\n        matches.map(s => parseInt(s)) :\r\n        [];\r\n}\r\n\r\nexport function createThreadDataSource(color: string) : ThreadDataSource {\r\n    return {\r\n        color: color\r\n    }\r\n}\r\n\r\nexport function createLoomState(dimensions: LoomDimensions) : LoomState {\r\n\r\n    const harnesses = (harnessCount: number) : Array<Harness> => {\r\n        return new Array(harnessCount).fill(createHarness()).map(_ => createHarness());\r\n    }\r\n\r\n    const warpThreads = (warpCount: number) : Array<Thread> => {\r\n        return new Array(warpCount).fill(defaultWarpThread).map((_, i) => createThread(i, defaultWarpThreadColor));\r\n    }\r\n\r\n    const weftThreads = (warpCount: number) : Array<Thread> => {\r\n        return new Array(warpCount).fill(defaultWeftThread).map((_, i) => createThread(i, defaultWeftThreadColor));\r\n    }\r\n\r\n    const treadles = (treadleCount: number) : Array<Treadle> => {\r\n        return new Array(treadleCount).fill(createTreadle()).map(_ => createTreadle());\r\n    }\r\n\r\n    const treadlingInstructions = (weftCount: number) => {\r\n        return new Array(weftCount).fill(null);\r\n    }\r\n\r\n    return {\r\n        dimensions,\r\n        harnesses: harnesses(dimensions.harnessCount),\r\n        warpThreads: warpThreads(dimensions.warpCount),\r\n        weftThreads: weftThreads(dimensions.weftCount),\r\n        treadles: treadles(dimensions.treadleCount),\r\n        treadlingInstructions: treadlingInstructions(dimensions.weftCount),\r\n        threadDataSource: { color: \"#FFFFFF\" },\r\n        weaveScalar: 1,\r\n        name: \"untitled\",\r\n        indexedThreadPalette: (cloneDeep(defaultIndexedThreadPalette))\r\n    }\r\n}\r\n\r\nconst defaultIndexedThreadPalette : IndexedThreadPalette = {\r\n    threadPalette: [createThreadDataSource(\"#FFFFFF\"), createThreadDataSource(\"#000000\")],\r\n    selectedIndex: 0\r\n}; \r\n\r\nexport function createLoomStateFromStringDataRepesentation(obj: LoomStateStringRepresentation) : LoomState {\r\n    const state = createLoomState(loomDimensionsFromString(obj));\r\n    const {threading, tieup, treadling} = obj.data;\r\n\r\n    // parse threading\r\n    // connect harness to warp threads\r\n    threading.split(',')\r\n        .map(s => parseInt(s))\r\n        .forEach((harnessIndex, warpThreadIndex) => {\r\n            state.harnesses[harnessIndex-1].threads.add(state.warpThreads[warpThreadIndex])\r\n        })\r\n\r\n    // parse tieup\r\n    // connect treadles to harnesses\r\n    tieup.split(',')\r\n         .map(treadleConnections => treadleConnections.split('+')\r\n                                                       .map(s => parseInt(s)))\r\n         .forEach((harnessIndexes, treadleIndex) => {\r\n            harnessIndexes.forEach(harnessIndex => {\r\n                const inverseHarnessIndex = (state.harnesses.length-1) - (harnessIndex-1);\r\n                state.treadles[treadleIndex].harnesses.add(state.harnesses[inverseHarnessIndex])\r\n            })\r\n         })\r\n    \r\n\r\n    // parse treadling\r\n    // write treadling instructions\r\n    expandPatternString(treadling)\r\n        .split(',')\r\n        .map(s => parseInt(s))\r\n        .forEach((treadleIndex, treadlingInstructionIndex) => {\r\n            state.treadlingInstructions[treadlingInstructionIndex] = state.treadles[treadleIndex-1];\r\n        })\r\n\r\n    state.name = obj.name;\r\n\r\n    return state;\r\n}","import { useEffect, useState } from \"react\";\r\nimport { LoomDimensions } from \"../../types\"\r\nimport { decamelize } from \"../../utils\";\r\nimport './DimensionsEditor.css'\r\n\r\ninterface DimensionsEditorProps {\r\n    dimensions: LoomDimensions\r\n    onDimensionsChange : (...args: any) => void\r\n    weaveDisplayScalarOnChange: (e: any) => void\r\n}\r\n\r\nexport const DimensionsEditor = (props: DimensionsEditorProps) => {\r\n\r\n    const [localDimensions, setLocalDimensions] = useState(props.dimensions);\r\n    \r\n    useEffect( () => {\r\n        setLocalDimensions(props.dimensions);\r\n    }, [props.dimensions])\r\n\r\n\r\n\r\n    const onSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        props.onDimensionsChange(localDimensions);\r\n    }\r\n\r\n    const handleChange = (e : any) => {\r\n        e.preventDefault();\r\n        setLocalDimensions({...localDimensions, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    const formItems = Object.keys(props.dimensions).map((dimensionKey : string) => {\r\n        return (\r\n            <>\r\n            <label className=\"InputLabel\" htmlFor={dimensionKey}>{decamelize(dimensionKey, \" \") + \" \"}</label>\r\n            <input className=\"InputField\" style={{display: \"inline\"}} type=\"textfield\" name={dimensionKey} onChange={handleChange} placeholder={props.dimensions[dimensionKey].toString()}></input>\r\n            <p className=\"CurrentDimension\" style={{display: \"inline\"}}>{`→ ${props.dimensions[dimensionKey]}`}</p>\r\n            <br/>\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"Panel\">\r\n        <h1 className=\"FormHeader\">Dimensions Editor</h1>\r\n        <div className=\"PanelContent\">\r\n            <form className=\"DimensionsForm\" onSubmit={onSubmit}>\r\n                {formItems}\r\n                <label style={{verticalAlign: \"top\"}} htmlFor=\"scaleSlider\">scale </label>\r\n                <input type=\"range\" min=\"1\" max=\"8\" defaultValue=\"1\" id=\"scaleSlider\" onChange={props.weaveDisplayScalarOnChange}/><br/>\r\n                <button className=\"ApplyBtn\" type=\"submit\">Apply</button>\r\n            </form>\r\n        </div>\r\n        </div>\r\n    )\r\n}","import { LoomStateStringRepresentation } from \"../types\";\r\n\r\nexport const patterns : Array<LoomStateStringRepresentation> = [\r\n    {\r\n      name: \"Basic Twill\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Periwinkle\",\r\n      data: {\r\n        threading:  \"3,2,1,4,3,2,1,4,3,4,3,2,3,2,1,4,3,4,1,2,3,2,3,4,3,4,1,2\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,2,1,4x3,3x3,2,1,4x2,1,2,3x3,4x3,1,2,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Diadem\",\r\n      data: {\r\n        threading:  \"4,1,2,3,4,1,2,3,4,1,2,3,2,3,2,1,4,3,4,3,4,1,2,3,2,3,2,1,4,3,2,1,4,3,2,1,4,1\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3x2,4,1,2,3,4,1,2,3,4,1x4,4,3,2x4,3,4,1x4,4,3,2,1,4,3,2,1,4,3x2\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Rings and Chains\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,4,1,4,3,4,3,2,3,2,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,2,3,2,3,4,3,4,1,4,1,4,3,2,1,4,1,2,3,4\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"1,2,3,4,1x4,4x3,3x3,2x3,1x2,2x2,1x2,2x2,1x2,2x2,1x2,2x2,1x2,2x2,1x2,2x3,3x3,4x3,1x4,4,3,2,1\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Wheel of Fortune\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,1,2,3,2,3,4,3,4,1,4,3,4,1,4,3,4,3,2,3,2,1,2,1,4,3,2,1,4,3,2,1,4,3,2,3,2,1,2,1,4,1,4,3,4,1,4,3,4,1,4,1,2,1,2,3,2,3,4,1,2,3,4\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"2,3,4,1,2x3,3x3,4x3,1x2,4x2,1x2,4x3,3x3,2x3,1,4,3,2,1,4,3,2,1,4,3x3,2x3,1x3,4x2,1x2,4x2,1x3,2x3,3x3,4,1,2,3,4,1\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Chariot Wheel No. 3\",\r\n      data: {\r\n        threading:  \"4,3,2,1,4,3,2,3,4,3,2,3,4,1,4,1,4,1,2,1,2,1,4,1,2,1,4,1,2,1,2,1,4,1,4,1,4,3,2,3,4,3,2,3,4,1,2,3\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"4,3,2,1,4,3x2,4x2,3x2,4,1x5,2x4,1x2,2x2,1x2,2x4,1x5,4,3x2,4x2,3x2,4,1,2,3,4\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Chariot Wheel No. 3 Alt\",\r\n      data: {\r\n        threading:  \"4,3,2,1,4,3,2,3,4,3,2,3,4,1,4,1,4,1,2,1,2,1,4,1,2,1,4,1,2,1,2,1,4,1,4,1,4,3,2,3,4,3,2,3,4,1,2,3\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,4,1,2,3,4x2,3x2,4x2,3,2x5,1x4,2x2,1x2,2x2,1x4,2x5,3,4x2,3x2,4x2,3,2,1,4,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Church Windows\",\r\n      data: {\r\n        threading:  \"3,2,1,4,3,4,3,4,1,4,1,2,1,4,1,4,3,4,3,4,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,4,3,4,3,4,1,4,1,2,1,4,1,4,3,4,3,4,2,1\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,2,1,4x4,1x3,2x2,1x3,4x4,1,2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2,1,4x4,1x3,2x2,1x3,4x4,1,2,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Cambridge Beauty\",\r\n      data: {\r\n        threading:  \"2,3,4,1,4,1,4,1,4,3,4,3,4,3,2,3,2,3,2,1,2,1,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,1,2,1,2,3,2,3,2,3,4,3,4,3,4,1,4,1,4,1,4,3\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,4,1x6,4x5,3x5,2x6,3,4x2,3,2x2,3,4x2,3,2x2,3,4x2,3,2x2,3,4x2,3,2x2,3,4x2,3,2x6,3x5,4x5,1x6,4,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Star of Bethlehem\",\r\n      data: {\r\n        threading:  \"2,3,4,1,2,3,4,1,2,3,4,1,2,1,2,3,2,3,4,3,4,1,4,1,2,3,4,1,4,3,2,1,4,1,4,3,4,3,2,3,2,1,2,1,4,3,2,1\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"2,3,4,1,2,3,4,1,2,3,4,1,2x3,3x3,4x3,1x3,1,2,3,4,1x2,4,3,2,1x3,4x3,3x3,2x3,1,4,3,2\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Maltese Cross\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,2,1,4,1,4,3,4,3,2,3,2,1,2,1,4,1,2,1,4,1,2,1,2,3,2,3,4,3,4,1,4,1,2,1,4,3,2\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"2,1,4,3,2,1,4,3,2x2,3x3,4x3,1x3,2x3,3x2,2x2,3x2,2x3,1x3,4x3,3x3,2x2,3,4,1,2\"\r\n      }\r\n    }\r\n  ]\r\n  ","import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\nimport { LoomDimensions, LoomState, LoomStateStringRepresentation } from \"../../types\"\r\nimport { createLoomState, createLoomStateFromStringDataRepesentation, decamelize } from \"../../utils\";\r\nimport { patterns as presetPatterns } from '../../presets/presetWeavingPatterns'\r\nimport '../DimensionsEditor/DimensionsEditor.css'\r\nimport './SaveLoadMenu.css'\r\n\r\ninterface SaveLoadMenuProps {\r\n    currentState: LoomState,\r\n    onLoadSave : (...args: any) => void\r\n}\r\n\r\nexport const SaveLoadMenu = (props: SaveLoadMenuProps) => {\r\n    const [saveStates, setSaveStates] = useState<LoomState[]>([]);\r\n\r\n    const stateAsListItem = (state : LoomState, index: number) => {\r\n        return (\r\n            <li id={\"saveFile-\"+index.toString()} className=\"FileListItem\">\r\n                <span className=\"FileName\">{state.name}</span>\r\n                <button className=\"OverwriteBtn\" onClick={handleOverwriteSave}>Overwrite</button>\r\n                <button className=\"LoadBtn\" onClick={()=>props.onLoadSave(state)}>Load</button>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    const saveStateListItems = (states : LoomState[]) : JSX.Element[] => {\r\n        return states.map((state : LoomState, i) => stateAsListItem(state, i));\r\n    }\r\n\r\n    const presetStateListItems = (stateStrings : Array<LoomStateStringRepresentation>) : JSX.Element[] => {\r\n        return stateStrings\r\n                .map(stateString => createLoomStateFromStringDataRepesentation(stateString))\r\n                .map((state, i) => stateAsListItem(state, i+saveStates.length));\r\n    }\r\n\r\n    const handleOverwriteSave = (e : any) => {\r\n        const index = e.target.id.split('-')[1];\r\n        const saveStatesCopy = [...saveStates];\r\n        saveStatesCopy[index] = props.currentState;\r\n        setSaveStates(saveStatesCopy);\r\n    }\r\n\r\n    const handleSaveState = () => {\r\n        setSaveStates([...saveStates, props.currentState]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Panel\">\r\n            <h1 className=\"FormHeader\">Save+Load File</h1>\r\n            <div className=\"SaveLoadContainer\">\r\n            <div className=\"PanelContent\">\r\n                <ol>\r\n                    {saveStateListItems(saveStates)}\r\n                    {presetStateListItems(presetPatterns)}\r\n                </ol>\r\n                <button className=\"SaveBtn\" onClick={handleSaveState}>New save</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from 'react';\r\nimport { IndexedThreadPalette, Thread, ThreadDataSource } from '../../types';\r\nimport { createThread, createThreadDataSource } from '../../utils';\r\nimport './ThreadEditor.css'\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\ninterface ThreadEditorProps {\r\n    indexedThreadPalette: IndexedThreadPalette\r\n    onSelectThreadDataSource: (index: number) => void\r\n    onSetThreadDataSource: (threadDataSource: ThreadDataSource) => void\r\n    onAddThreadDataSource: (threadDataSource: ThreadDataSource) => void\r\n}\r\n\r\nexport const ThreadEditor = (props: ThreadEditorProps) => {\r\n    const [newThreadDataSource, setNewThreadDataSource] = useState<ThreadDataSource>(createThreadDataSource(\"000000\"));\r\n    const [paletteLock, setPaletteLock] = useState<boolean>(true);\r\n\r\n    const handleColorPickerOnChange = (e: any) => {\r\n        if(!paletteLock){\r\n            const newThreadDataSource = {...props.indexedThreadPalette.threadPalette[props.indexedThreadPalette.selectedIndex], color: e.target.value}\r\n            props.onSetThreadDataSource(newThreadDataSource);\r\n        }\r\n        setNewThreadDataSource({...newThreadDataSource, color: e.target.value})\r\n    }\r\n\r\n    const handleAddThreadOnClick = (e: any) => {\r\n        props.onAddThreadDataSource(newThreadDataSource);\r\n    }\r\n\r\n    const togglePaletteLock = () => {\r\n        setPaletteLock(!paletteLock);\r\n    }\r\n\r\n    const threadItems = props.indexedThreadPalette.threadPalette.map((threadDataSource, i) => {\r\n        const classes = \"Thread\" + ((i==props.indexedThreadPalette.selectedIndex) ? \" selected\" : \"\");\r\n        // console.log(threadDataSource.color);\r\n        return <div className={classes} \r\n                    id={\"thread-\"+i.toString()} \r\n                    style={{backgroundColor: threadDataSource.color}}\r\n                    onClick={(e: any) => {props.onSelectThreadDataSource(e.target.id.split('-')[1])}}/>\r\n    })\r\n    \r\n    return (\r\n        <div className=\"ThreadEditorContainer Panel\">\r\n            <h1>Thread Palette</h1>\r\n            <div className=\"PanelContent\">\r\n                <div className=\"ThreadContainer\">\r\n                    {threadItems}\r\n                    <button className=\"AddThreadButton\"\r\n                            onClick={handleAddThreadOnClick}>+</button>\r\n                </div>\r\n                <div className=\"ThreadAttributeDesigner\">\r\n                    <input className=\"ColorPicker\" type=\"color\" id=\"ColorPicker\" onChange={handleColorPickerOnChange}></input>\r\n                </div>\r\n                <button className=\"LockBtn\" onClick={togglePaletteLock}>{paletteLock ? \"Unlock Palette\" : \"Lock Palette\"}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { Dispatch, MouseEventHandler, SetStateAction } from 'react';\r\nimport { Orientation, SubGridType, Thread } from '../../types';\r\nimport Button from '../Button/Button';\r\nimport '../ButtonGrid/ButtonGrid.scss';\r\n\r\ninterface ThreadButtonGridProps {\r\n    gridValues: Thread[];\r\n    orientation: Orientation;\r\n    // setGridValues: Dispatch<SetStateAction<boolean[][]>>;\r\n    cellSize: {width: number, height: number};\r\n    subGridType: SubGridType;\r\n    onClickHandler: (e: React.MouseEvent<HTMLDivElement>, subGridType: SubGridType) => void;\r\n}\r\n\r\nconst ThreadButtonGrid = (props: ThreadButtonGridProps) => {\r\n\r\n    const buttonOnClickHandler = (e: any) => {\r\n        props.onClickHandler(e, props.subGridType);\r\n    }\r\n\r\n    const arrayOfButtons = props.gridValues.map((item, index) => {\r\n        return <Button  styleDataSource={item.dataSource}\r\n                        col={(props.orientation===Orientation.HORIZONTAL) ? index : 0}\r\n                        row={(props.orientation===Orientation.VERTICAL) ? index : 0}\r\n                        cellSize={{width: props.cellSize.width, height: props.cellSize.height}}\r\n                        onClickHandler={buttonOnClickHandler}\r\n                        thread={props.gridValues[index]}/>\r\n    })\r\n\r\n    return (\r\n        <div className=\"ButtonGrid\"\r\n             style={{gridTemplateColumns: `repeat(1fr, ${props.orientation===Orientation.VERTICAL ? props.gridValues.length : 1})`,\r\n                     gridTemplateRows: `repeat(1fr, ${props.orientation===Orientation.HORIZONTAL ? props.gridValues.length : 1})`,\r\n                     width: `${(props.orientation===Orientation.HORIZONTAL ? props.gridValues.length : 1)*props.cellSize.width}px`,\r\n                     height: `${(props.orientation===Orientation.VERTICAL ? props.gridValues.length : 1)*props.cellSize.height}px`}}>\r\n            {arrayOfButtons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThreadButtonGrid;","import React, { useEffect, useReducer, useRef } from \"react\";\r\nimport WeaveDisplay from \"../WeaveDisplay/WeaveDisplay\"\r\nimport ButtonGrid from \"../ButtonGrid/ButtonGrid\"\r\nimport {LoomActionType, LoomAction, LoomState, Harness, Treadle, Thread, DrawingInstruction, Color, LoomDimensions, Orientation, SubGridType, ThreadDataSource} from '../../types';\r\nimport {createThread, createTreadle, createHarness, dimensionDefault, defaultWarpThread, defaultWeftThread, defaultWarpThreadColor, defaultWeftThreadColor, createLoomState} from '../../utils';\r\nimport './LoomEditor.scss'\r\nimport { DimensionsEditor } from \"../DimensionsEditor/DimensionsEditor\";\r\nimport { SaveLoadMenu } from \"../SaveLoadMenu/SaveLoadMenu\";\r\nimport { ThreadEditor } from \"../ThreadEditor/ThreadEditor\";\r\nimport ThreadButtonGrid from \"../ThreadButtonGrid/ThreadButtonGrid\";\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\nfunction reducer(state: LoomState, action: LoomAction) : LoomState {\r\n    const stateCopy : LoomState = cloneDeep(state);\r\n\r\n    switch(action.type) {\r\n        case LoomActionType.SET_HARNESSTOTHREADATTACHMENTS:\r\n            // LEFT TABLE\r\n            { // block-scope for local consts\r\n            const harness : Harness = stateCopy.harnesses[action.harnessID];\r\n            const thread : Thread = stateCopy.warpThreads[action.threadID];\r\n\r\n            if(harness.threads.has(thread)) {\r\n                harness.threads.delete(thread);\r\n            } else {\r\n                for(let i = 0; i < stateCopy.harnesses.length; i++) {\r\n                    if(stateCopy.harnesses[i].threads.has(thread)) {\r\n                        stateCopy.harnesses[i].threads.delete(thread);\r\n                    }\r\n                }\r\n                harness.threads.add(thread);\r\n            }\r\n            }\r\n            break;\r\n        case LoomActionType.SET_TREADLETOHARNESSATTACHMENTS:\r\n            // TIEUP\r\n            { // block-scope for local consts\r\n            const treadle : Treadle = stateCopy.treadles[action.treadleID];\r\n            const harness : Harness = stateCopy.harnesses[action.harnessID];\r\n            \r\n            if(treadle.harnesses.has(harness)) {\r\n                treadle.harnesses.delete(harness);\r\n            } else {\r\n                treadle.harnesses.add(harness);\r\n            }\r\n            }\r\n            break;\r\n        case LoomActionType.SET_TREADLINGINSTRUCTION:\r\n            // RIGHT TABLE\r\n            {\r\n            const treadle : Treadle = stateCopy.treadles[action.treadleID];\r\n            if(stateCopy.treadlingInstructions[action.instructionIndex] === treadle) {\r\n                stateCopy.treadlingInstructions[action.instructionIndex] = null;\r\n            } else {\r\n                stateCopy.treadlingInstructions[action.instructionIndex] = treadle;\r\n            }\r\n            }\r\n            break;\r\n        case LoomActionType.SET_HARNESSCOUNT:\r\n            if(action.harnessCount > stateCopy.harnesses.length){\r\n                while(stateCopy.harnesses.length < action.harnessCount) {\r\n                    stateCopy.harnesses.unshift(createHarness());\r\n                }\r\n            } else {\r\n                const removedHarnesses = stateCopy.harnesses.splice(0, stateCopy.harnesses.length - action.harnessCount);\r\n                stateCopy.treadles.forEach(treadle => {\r\n                    removedHarnesses.forEach(harness => {\r\n                        treadle.harnesses.delete(harness);\r\n                    })\r\n                })\r\n            }\r\n            stateCopy.dimensions.harnessCount = action.harnessCount;\r\n            break;\r\n        case LoomActionType.SET_TREADLECOUNT:\r\n            if(action.treadleCount > stateCopy.treadles.length){\r\n                while(stateCopy.treadles.length < action.treadleCount) {\r\n                    stateCopy.treadles.push(createTreadle());\r\n                }\r\n            } else {\r\n                const removedTreadles = stateCopy.treadles.splice(action.treadleCount);\r\n                stateCopy.treadlingInstructions.forEach(instruction => {\r\n                    removedTreadles.forEach(removedTreadle => {\r\n                        instruction = ( instruction === removedTreadle ) ? null : instruction;\r\n                    })\r\n                })\r\n            }\r\n            stateCopy.dimensions.treadleCount = action.treadleCount;\r\n            break;\r\n        case LoomActionType.SET_WARPCOUNT:\r\n            if (action.warpCount > state.warpThreads.length) {\r\n                while(stateCopy.warpThreads.length < action.warpCount) {\r\n                    stateCopy.warpThreads.unshift(createThread(stateCopy.warpThreads.length, defaultWarpThreadColor));\r\n                }\r\n            } else {\r\n                stateCopy.warpThreads.splice(0, stateCopy.warpThreads.length - action.warpCount);\r\n            }\r\n            stateCopy.warpThreads.forEach((wt, i) => {\r\n                wt.id = i;\r\n            });\r\n            stateCopy.dimensions.warpCount = action.warpCount;\r\n            break;\r\n        case LoomActionType.SET_WEFTCOUNT:\r\n            // weft and treadling instruction\r\n            if (action.weftCount > state.weftThreads.length) {\r\n                while(stateCopy.weftThreads.length < action.weftCount) {\r\n                    stateCopy.weftThreads.push(createThread(stateCopy.weftThreads.length, defaultWeftThreadColor));\r\n                    stateCopy.treadlingInstructions.push(null);\r\n                }\r\n            } else {\r\n                stateCopy.weftThreads.splice(action.weftCount);\r\n                stateCopy.treadlingInstructions.splice(action.weftCount);\r\n            }\r\n            stateCopy.dimensions.weftCount = action.weftCount;\r\n            break;\r\n        case LoomActionType.SET_CELLSIZE:\r\n            stateCopy.dimensions.cellSize = action.cellSize;\r\n            break;\r\n        case LoomActionType.SET_STATE:\r\n            const newState = action.state;\r\n            action.state.weaveScalar = stateCopy.weaveScalar;\r\n            return newState;\r\n            break;\r\n        case LoomActionType.SET_WARPTHREADDATASOURCE:\r\n            stateCopy.warpThreads[action.warpThreadID].dataSource = stateCopy.indexedThreadPalette.threadPalette[stateCopy.indexedThreadPalette.selectedIndex];\r\n            break;\r\n        case LoomActionType.SET_WEFTTHREADDATASOURCE:\r\n            stateCopy.weftThreads[action.weftThreadID].dataSource = stateCopy.indexedThreadPalette.threadPalette[stateCopy.indexedThreadPalette.selectedIndex];\r\n            break;\r\n        case LoomActionType.SET_SELECTEDTHREADDATASOURCE:\r\n            stateCopy.indexedThreadPalette.threadPalette[stateCopy.indexedThreadPalette.selectedIndex] = action.dataSource;\r\n            break;\r\n        case LoomActionType.SET_SCALAR:\r\n            stateCopy.weaveScalar = action.scalar;\r\n            break;\r\n        case LoomActionType.ADD_THREADDATASOURCE:\r\n            stateCopy.indexedThreadPalette.threadPalette.push(cloneDeep(action.dataSource));\r\n            break;\r\n        case LoomActionType.SET_SELECTEDTHREADDATASOURCEINDEX:\r\n            stateCopy.indexedThreadPalette.selectedIndex = action.dataSourceIndex;\r\n        // case LoomActionyType.SET_\r\n    }\r\n    // actions\r\n    return stateCopy;\r\n}\r\n\r\n// const defaultWarpThreadRepresenation = () => {\r\n//     return (ctx: CanvasRenderingContext2D) => {\r\n//         ctx.fillStyle = \"white\";\r\n//     }\r\n// }\r\n\r\n// const defaultWeftThreadRepresentation = () => {\r\n//     return (ctx: CanvasRenderingContext2D) => {\r\n//         ctx.fillStyle = \"black\";\r\n//     }\r\n// }\r\n\r\nconst initialState : LoomState = createLoomState(dimensionDefault);\r\n\r\nconst Loom = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    const loomGridOnClickEventHandler = (e: any, type: SubGridType) => {\r\n        const target = e.target as HTMLDivElement;\r\n        const gridRow : number = parseInt(target.style.gridRow)-1;\r\n        const gridCol : number = parseInt(target.style.gridColumn)-1;\r\n        switch(type) {\r\n            case SubGridType.HARNESSTOTHREADTABLE:\r\n                dispatch({type: LoomActionType.SET_HARNESSTOTHREADATTACHMENTS, harnessID: gridRow, threadID: gridCol});\r\n                break;\r\n            case SubGridType.TIEUPTABLE:\r\n                dispatch({type: LoomActionType.SET_TREADLETOHARNESSATTACHMENTS, treadleID: gridCol, harnessID: gridRow});\r\n                break;\r\n            case SubGridType.TREADLINGTABLE:\r\n                dispatch({type: LoomActionType.SET_TREADLINGINSTRUCTION, treadleID: gridCol, instructionIndex: gridRow});\r\n                break;\r\n            case SubGridType.WEFTTHREADTABLE:\r\n                // Weft thread data source change\r\n                dispatch({type: LoomActionType.SET_WEFTTHREADDATASOURCE, weftThreadID: gridRow});\r\n                break;\r\n            case SubGridType.WARPTHREADTABLE:\r\n                // Warp thread data source change\r\n                dispatch({type: LoomActionType.SET_WARPTHREADDATASOURCE, warpThreadID: gridCol});\r\n                break;\r\n        }\r\n    }\r\n\r\n    const topGridValues = (warpThreads: Thread[], harnesses: Harness[]) : Array<Array<boolean>> => {\r\n        const gridValues : boolean[][] = new Array<Array<boolean>>(harnesses.length).fill(new Array<boolean>()).map((_, rowIndex) => {\r\n            return new Array<boolean>(warpThreads.length).fill(false).map((_, colIndex) => {\r\n                return harnesses[rowIndex].threads.has(warpThreads[colIndex]);\r\n            })\r\n        });\r\n        return gridValues;\r\n    }\r\n\r\n    const tieup = (harnesses: Harness[], treadles: Treadle[]) => {\r\n        const gridValues : boolean[][] = new Array<Array<boolean>>(harnesses.length).fill(new Array<boolean>()).map((_, rowIndex) => {\r\n            return new Array<boolean>(treadles.length).fill(false).map((_, colIndex) => {\r\n                return treadles[colIndex].harnesses.has(harnesses[rowIndex]);\r\n            })\r\n        });\r\n        return gridValues;\r\n    }\r\n\r\n    const rightGridValues = (treadles: Treadle[], treadlingInstructions: (Treadle | null)[]) => {\r\n        const gridValues : boolean[][] = new Array<Array<boolean>>(treadlingInstructions.length).fill(new Array<boolean>()).map((_, rowIndex) => {\r\n            return new Array<boolean>(treadles.length).fill(false).map((_, colIndex) => {\r\n                return treadlingInstructions[rowIndex] === treadles[colIndex];\r\n            })\r\n        });\r\n        return gridValues;\r\n    }\r\n\r\n    const standardWarpDrawInstruction = (x: number, y: number, size: number, color: string) : DrawingInstruction => {\r\n        return ((ctx: CanvasRenderingContext2D) => {\r\n            ctx.rect(x,y,size,size);\r\n            ctx.fillStyle = color;\r\n        })\r\n    }\r\n\r\n    const standardWeftDrawInstruction = (y: number, width: number, height: number, color: string) : DrawingInstruction => {\r\n        return ((ctx: CanvasRenderingContext2D) => {\r\n            ctx.rect(0, y, width, height);\r\n            ctx.fillStyle = color;\r\n        })\r\n    }\r\n\r\n    const weaveDisplayDrawingInstructions = (state: LoomState): DrawingInstruction[] => {\r\n        const instructions : DrawingInstruction[] = [];\r\n        const size = state.dimensions.cellSize;\r\n        state.weftThreads.forEach((weftThread, row) => {\r\n            instructions.push(standardWeftDrawInstruction(row*size, state.warpThreads.length*size, size, weftThread.dataSource.color))\r\n        })\r\n        state.treadlingInstructions.forEach((treadle, row) => {\r\n            if(treadle){\r\n                treadle.harnesses.forEach(harness => {\r\n                    harness.threads.forEach(warpThread => {\r\n                        instructions.push(standardWarpDrawInstruction(warpThread.id*size, row*size, size, warpThread.dataSource.color));\r\n                    })\r\n                })\r\n            }\r\n        })\r\n        return instructions;\r\n    }\r\n\r\n    const handleDimensionsChange = (dimensions: LoomDimensions) => {\r\n        dispatch({ type: LoomActionType.SET_HARNESSCOUNT, harnessCount: dimensions.harnessCount});\r\n        dispatch({ type: LoomActionType.SET_TREADLECOUNT, treadleCount: dimensions.treadleCount});\r\n        dispatch({ type: LoomActionType.SET_WARPCOUNT, warpCount: dimensions.warpCount});\r\n        dispatch({ type: LoomActionType.SET_WEFTCOUNT, weftCount: dimensions.weftCount});\r\n        dispatch({ type: LoomActionType.SET_CELLSIZE, cellSize: dimensions.cellSize});\r\n    }\r\n\r\n    const handleLoadSave = (state: LoomState) => {\r\n        dispatch({ type: LoomActionType.SET_STATE, state})\r\n    }\r\n\r\n    // const handleOverwriteSave = (state: LoomState, index: number) => {\r\n    //     dispatch({ type: LoomActionType.OVERWRITE_SAVE, index})\r\n    // }\r\n\r\n    const handleSelectThreadDataSource = (selectedThreadDataSourceIndex: number) => {\r\n        dispatch({ type: LoomActionType.SET_SELECTEDTHREADDATASOURCEINDEX, dataSourceIndex: selectedThreadDataSourceIndex});\r\n    }\r\n\r\n    const handleOnAddThreadDataSource = (threadDataSourceToAdd: ThreadDataSource) => {\r\n        dispatch({ type: LoomActionType.ADD_THREADDATASOURCE, dataSource: threadDataSourceToAdd });\r\n    }\r\n\r\n    const handleSetThreadDataSource = (newthreadDataSource: ThreadDataSource) => {\r\n        dispatch({ type: LoomActionType.SET_SELECTEDTHREADDATASOURCE, dataSource: newthreadDataSource})\r\n    }\r\n\r\n    const weaveDisplayScalarHandler = (e: any) => {\r\n        console.log(e);\r\n        e.preventDefault();\r\n        const weaveDisplayScalar = parseInt(e.target.value);\r\n        dispatch({ type: LoomActionType.SET_SCALAR, scalar: weaveDisplayScalar});\r\n    }\r\n\r\n    return (\r\n        <div className=\"LoomEditorContainer\">\r\n            <div className=\"LoomPane\">\r\n                <div className=\"LoomContainer\">\r\n                    <ThreadButtonGrid subGridType={SubGridType.WARPTHREADTABLE} cellSize={{width: state.dimensions.cellSize, height: (state.dimensions.cellSize/2.)}} gridValues={state.warpThreads} orientation={Orientation.HORIZONTAL} onClickHandler={loomGridOnClickEventHandler}/>\r\n                    <span className=\"void\">&nbsp;</span>\r\n                    <span className=\"void\">&nbsp;</span>\r\n                    <ButtonGrid subGridType={SubGridType.HARNESSTOTHREADTABLE} cellSize={state.dimensions.cellSize} gridValues={topGridValues(state.warpThreads, state.harnesses)} onClickHandler={loomGridOnClickEventHandler}/>\r\n                    <ButtonGrid subGridType={SubGridType.TIEUPTABLE} cellSize={state.dimensions.cellSize} gridValues={tieup(state.harnesses, state.treadles)} onClickHandler={loomGridOnClickEventHandler}/>\r\n                    <span className=\"void\">&nbsp;</span>\r\n                    <WeaveDisplay repetitions={state.weaveScalar} dimensions={{x: state.dimensions.warpCount*state.dimensions.cellSize, y: state.dimensions.weftCount*state.dimensions.cellSize}} drawingInstructions={weaveDisplayDrawingInstructions(state)}/>\r\n                    <ButtonGrid subGridType={SubGridType.TREADLINGTABLE} cellSize={state.dimensions.cellSize} gridValues={rightGridValues(state.treadles, state.treadlingInstructions)} onClickHandler={loomGridOnClickEventHandler}/>\r\n                    <ThreadButtonGrid subGridType={SubGridType.WEFTTHREADTABLE} cellSize={{width: (state.dimensions.cellSize/2.), height: state.dimensions.cellSize}} gridValues={state.weftThreads} orientation={Orientation.VERTICAL} onClickHandler={loomGridOnClickEventHandler}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"EditorPanes\">\r\n                <DimensionsEditor\r\n                    dimensions={state.dimensions}\r\n                    weaveDisplayScalarOnChange={weaveDisplayScalarHandler}\r\n                    onDimensionsChange={handleDimensionsChange}\r\n                    />\r\n                <ThreadEditor\r\n                    onSelectThreadDataSource={handleSelectThreadDataSource}\r\n                    onSetThreadDataSource={handleSetThreadDataSource}\r\n                    onAddThreadDataSource={handleOnAddThreadDataSource}\r\n                    indexedThreadPalette={state.indexedThreadPalette}/>\r\n                <SaveLoadMenu\r\n                    currentState={state}\r\n                    onLoadSave={handleLoadSave}\r\n                    // onOverwriteSave={handleOverwriteSave}\r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loom;\r\n","import React, { useReducer, useState } from 'react';\r\nimport { ContainerAction, ContainerActionType } from '../../types';\r\nimport './Container.scss';\r\nimport Loom from '../LoomEditor/LoomEditor';\r\n\r\n// interface ContainerState {\r\n//     warpCount: number,\r\n//     weftCount: number,\r\n//     harnessCount: number,\r\n//     treadleCount: number\r\n// }\r\n\r\n// const initialState : ContainerState = {\r\n//     warpCount: 16,\r\n//     weftCount: 16,\r\n//     harnessCount: 4,\r\n//     treadleCount: 4\r\n// };\r\n\r\n// function reducer(state: ContainerState, action: ContainerAction) {\r\n//     switch(action.type) {\r\n//         case ContainerActionType.SET_WARPCOUNT:\r\n//             return {...state, warpCount: action.warpCount};\r\n//         case ContainerActionType.SET_WEFTCOUNT:\r\n//             return {...state, weftCount: action.weftCount};\r\n//         case ContainerActionType.SET_HARNESSCOUNT:\r\n//             return {...state, harnessCount: action.harnessCount};\r\n//         case ContainerActionType.SET_TREADLECOUNT:\r\n//             return {...state, treadleCount: action.treadleCount};\r\n//         default:\r\n//             throw new Error();\r\n//     }\r\n// }\r\n\r\nconst Container = () => {\r\n    // const [state, dispatch] = useReducer(reducer, initialState);\r\n    // const [inputWarpCount, setInputWarpCount] = useState<number>(state.warpCount);\r\n    // const [inputWeftCount, setInputWeftCount] = useState<number>(state.weftCount);\r\n    // const [inputHarnessCount, setInputHarnessCount] = useState<number>(state.harnessCount);\r\n    // const [inputTreadleCount, setInputTreadleCount] = useState<number>(state.treadleCount);\r\n\r\n    // const saveHandler = (e: any) => {\r\n    //     // dispatch({type: ContainerActionType.TEST, arg: e})\r\n    //     console.log(e);\r\n    // }\r\n\r\n    return (\r\n        <div className=\"Container\">\r\n            <Loom \r\n                // warpCount={state.warpCount}\r\n                // weftCount={state.weftCount}\r\n                // harnessCount={state.harnessCount}\r\n                // treadleCount={state.treadleCount}\r\n                // cellSize={16}\r\n                // onSave={saveHandler}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","import React from 'react';\nimport Container from '../Container/Container';\nimport './App.css';\nimport '../../Styles/typography.scss'\nimport '../../Styles/form.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container></Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}