{"version":3,"sources":["types/index.ts","Components/Button/Button.tsx","Components/ButtonGrid/ButtonGrid.tsx","utils/index.ts","Components/WeaveDisplay/CustomBlurEffect.js","Components/DimensionsEditor/DimensionsEditor.tsx","Components/ThreadEditor/ThreadEditor.tsx","Components/ThreadButtonGrid/ThreadButtonGrid.tsx","Components/ImageEditor/ImageEditor.tsx","Components/WeaveDisplay/WeaveDisplayMaterial.ts","Components/WeaveDisplay/WeaveDisplayThree.tsx","Components/LoomEditor/LoomEditor.tsx","Components/ToolBarMenu/ToolBarMenu.tsx","Components/ToolBarMenuNode/ToolBarMenuNode.tsx","presets/presetWeavingPatterns.tsx","Components/ToolBar/ToolBar.tsx","Hooks/useLocalStorage.ts","Components/Dialog/Dialog.tsx","Components/Container/Container.tsx","Components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["SubGridType","Orientation","ContainerActionType","LoomActionType","CameraMode","Button","props","style","gridRow","row","gridColumn","col","thread","palette","threadPalette","threadPaletteIndex","color","className","value","onClick","onClickHandler","ButtonGrid","handleButtonClick","e","subGridType","arrayOfButtons","gridValues","map","rowIndex","colIndex","cellSize","gridTemplateRows","length","gridTemplateColumns","width","height","uuidv4","require","v4","cloneDeep","dimensionDefault","harnessCount","treadleCount","warpCount","weftCount","defaultIndexedThreadPalette","createThreadDataSource","selectedIndex","defaultWeftThread","id","defaultWarpThread","gFromHexString","str","parseInt","substring","bFromHexString","createHarness","threads","Set","createTreadle","harnesses","createThread","loomDimensionsFromString","obj","data","threading","tieup","treadling","tieupNumbers","regex","matches","match","s","numbersFromString","split","expandPatternString","Math","max","newStr","replaceAll","p1","p2","repeat","endsWith","createUUID","createLoomState","dimensions","Array","fill","_","warpThreads","i","weftThreads","treadles","treadlingInstructions","threadDataSource","name","indexedThreadPalette","convertLoomStateToJSON","state","JSON","stringify","convertLoomPartToJSON","treadle","indexOf","partArr","refArr","indexes","forEach","part","push","harness","_uParam","DimensionsEditor","useState","localDimensions","setLocalDimensions","useEffect","handleChange","preventDefault","target","formItems","Object","keys","dimensionKey","htmlFor","separator","replace","toLowerCase","display","type","onChange","placeholder","toString","onSubmit","onDimensionsChange","ThreadEditor","newThreadDataSource","setNewThreadDataSource","paletteLock","setPaletteLock","threadItems","classes","backgroundColor","onSelectThreadDataSource","onAddThreadDataSource","onSetThreadDataSource","ThreadButtonGrid","buttonOnClickHandler","item","index","styleDataSource","orientation","HORIZONTAL","VERTICAL","ImageEditor","children","fragmentShader","Effect","defaultDataBuffer","Uint8Array","WeaveDisplayMaterial","shaderMaterial","patternDataTexture","DataTexture","THREE","repeats","extend","createPatternDataTexture","buffer","console","log","size","patternData","stride","r","g","b","initialPatternDataTexture","Scene","myMesh","useRef","perspectiveCameraRef","setPatternDataTexture","threeState","useThree","warpThreadCount","weftThreadCount","perspectivePlaneWidth","perspectivePlaneHeight","aspect","vFov","atan","PI","tan","colorBuffer","needsUpdate","current","camera","fov","canvasWidth","unitSize","canvasHeight","cameraMode","Orthographic","OrthographicCamera","makeDefault","args","Perspective","PerspectiveCamera","position","ref","OrbitControls","enablePan","enableZoom","enableRotate","attach","reducer","action","stateCopy","SET_HARNESSTOTHREADATTACHMENTS","harnessID","threadID","has","delete","add","SET_TREADLETOHARNESSATTACHMENTS","treadleID","SET_TREADLINGINSTRUCTION","instructionIndex","SET_HARNESSCOUNT","unshift","removedHarnesses","splice","SET_TREADLECOUNT","removedTreadles","instruction","removedTreadle","SET_WARPCOUNT","wt","SET_WEFTCOUNT","SET_STATE","SET_WARPTHREADTHREADPALETTEINDEX","warpThreadID","SET_WEFTTHREADTHREADPALETTEINDEX","weftThreadID","SET_SELECTEDTHREADDATASOURCE","dataSource","ADD_THREADDATASOURCE","SET_SELECTEDTHREADDATASOURCEINDEX","dataSourceIndex","Loom","useReducer","dispatch","imageCellSize","setImageCellSize","imageScale","setImageScale","imageUnitSize","currentState","loomGridOnClickEventHandler","gridCol","HARNESSTOTHREADTABLE","TIEUPTABLE","TREADLINGTABLE","WEFTTHREADTABLE","WARPTHREADTABLE","treadleInstruction","currentWeftThread","activeWarpThreads","currentWarpThread","weaveDisplayColorBuffer","onMouseDown","onMouseMove","onMouseUp","verticalAlign","min","defaultValue","selectedThreadDataSourceIndex","newthreadDataSource","threadDataSourceToAdd","ToolBarMenu","ToolBarMenuNode","text","STANDARD_TIEUP","patterns","ToolBar","stateStrings","saveStateToolBarMenuNodes","saveStateDict","stateID","saveStateNames","onLoad","onCreateNew","onSave","onSaveAs","presetPatterns","stateString","reverse","harnessIndex","warpThreadIndex","invertedHarnessIndex","treadleConnections","harnessIndexes","treadleIndex","inverseHarnessIndex","treadlingInstructionIndex","createLoomStateFromStringDataRepesentation","onLoadPreset","presetStateAsToolBarMenuNode","onDimensionChange","useLocalStorage","key","initialValue","readValue","window","localStorage","getItem","parse","error","warn","storedValue","setStoredValue","handleStorageChange","addEventListener","removeEventListener","newValue","Function","setItem","dispatchEvent","Event","Dialog","Container","setSaveStateDict","setSaveStateNames","initialState","setCurrentState","openDialog","setOpenDialog","currentDialog","setCurrentDialog","liveStateRef","setLiveStateRef","setCameraMode","handleClose","SaveAsDialog","newUUID","stateClone","newName","serilizedState","CreateNewDialog","newState","jsonData","subArr","convertJSONToLoomState","serializedLoomState","newMode","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62a422bc.chunk.js","sourcesContent":["export enum SubGridType {\r\n  WARPTHREADTABLE,\r\n  WEFTTHREADTABLE,\r\n  TIEUPTABLE,\r\n  HARNESSTOTHREADTABLE,\r\n  TREADLINGTABLE \r\n}\r\n\r\nexport enum Orientation {\r\n  VERTICAL,\r\n  HORIZONTAL\r\n}\r\n\r\nexport enum ContainerActionType {\r\n  SET_WARPCOUNT,\r\n  SET_WEFTCOUNT,\r\n  SET_TREADLECOUNT,\r\n  SET_HARNESSCOUNT\r\n}\r\n  \r\nexport type ContainerAction =\r\n| { type: ContainerActionType.SET_WARPCOUNT; warpCount: number;}\r\n| { type: ContainerActionType.SET_WEFTCOUNT; weftCount: number;}\r\n| { type: ContainerActionType.SET_TREADLECOUNT; treadleCount: number;}\r\n| { type: ContainerActionType.SET_HARNESSCOUNT; harnessCount: number;}\r\n\r\nexport enum LoomActionType {\r\n    SET_HARNESSTOTHREADATTACHMENTS,\r\n    SET_TREADLETOHARNESSATTACHMENTS,\r\n    SET_TREADLINGINSTRUCTION,\r\n    SET_HARNESSCOUNT,\r\n    SET_TREADLECOUNT,\r\n    SET_WEFTCOUNT,\r\n    SET_WARPCOUNT,\r\n    SET_STATE,\r\n    SET_WARPTHREADTHREADPALETTEINDEX,\r\n    SET_WEFTTHREADTHREADPALETTEINDEX,\r\n    SET_SELECTEDTHREADDATASOURCEINDEX,\r\n    SET_SELECTEDTHREADDATASOURCE,\r\n    ADD_THREADDATASOURCE\r\n}\r\n\r\nexport type LoomAction =\r\n| { type: LoomActionType.SET_HARNESSTOTHREADATTACHMENTS; harnessID: number; threadID: number; }\r\n| { type: LoomActionType.SET_TREADLETOHARNESSATTACHMENTS; treadleID: number; harnessID: number; }\r\n| { type: LoomActionType.SET_TREADLINGINSTRUCTION; treadleID: number; instructionIndex: number; }\r\n| { type: LoomActionType.SET_HARNESSCOUNT; harnessCount: number; }\r\n| { type: LoomActionType.SET_TREADLECOUNT; treadleCount: number; }\r\n| { type: LoomActionType.SET_WARPCOUNT; warpCount: number; }\r\n| { type: LoomActionType.SET_WEFTCOUNT; weftCount: number; }\r\n| { type: LoomActionType.SET_STATE; state: LoomState; }\r\n| { type: LoomActionType.SET_WARPTHREADTHREADPALETTEINDEX; warpThreadID: number; }\r\n| { type: LoomActionType.SET_WEFTTHREADTHREADPALETTEINDEX; weftThreadID: number; }\r\n| { type: LoomActionType.SET_SELECTEDTHREADDATASOURCEINDEX; dataSourceIndex: number; }\r\n| { type: LoomActionType.ADD_THREADDATASOURCE; dataSource: ThreadDataSource; }\r\n| { type: LoomActionType.SET_SELECTEDTHREADDATASOURCE; dataSource: ThreadDataSource; }\r\n\r\nexport type LoomDimensions = {\r\n  [property: string]: number\r\n}\r\n\r\nexport type LoomState = {\r\n  name: string;\r\n  id: string;\r\n  dimensions: LoomDimensions;\r\n  harnesses: Harness[];\r\n  warpThreads: Thread[];\r\n  weftThreads: Thread[];\r\n  treadles: Treadle[];\r\n  treadlingInstructions: (Treadle | null)[];\r\n  threadDataSource: ThreadDataSource;\r\n  indexedThreadPalette: IndexedThreadPalette\r\n}\r\n\r\nexport type SerializedLoomState = string;\r\n\r\nexport type LoomStateDict = {\r\n  [uuid: string]: SerializedLoomState\r\n}\r\n\r\nexport type LoomStateStringRepresentation = {\r\n  name: string,\r\n  data: {\r\n    threading:  string,\r\n    tieup:      string,\r\n    treadling:  string\r\n  }\r\n}\r\n\r\nexport type Harness = {\r\n  threads: Set<Thread>\r\n}\r\n\r\nexport type Treadle = {\r\n  harnesses: Set<Harness>\r\n}\r\n\r\nexport type Thread = {\r\n  id: number\r\n  threadPaletteIndex: number\r\n}\r\n\r\nexport type ThreadDataSource = {\r\n  color: Color\r\n}\r\n\r\nexport type IndexedThreadPalette = {\r\n  threadPalette: ThreadDataSource[];\r\n  selectedIndex: number\r\n}\r\n\r\nexport type Color = string\r\n\r\nexport type DrawingInstruction = (ctx: CanvasRenderingContext2D) => void\r\nexport type DrawingInstructionWGL = (ctx: WebGL2RenderingContext, colorLocation: any, program: any) => void\r\n\r\nexport enum CameraMode {\r\n  Orthographic,\r\n  Perspective\r\n}\r\n\r\n// type DrawInstructions = {\r\n//   // [instructionName: string] : (arg0: value) => value;\r\n// }\r\n\r\n// type Filter = {\r\n//   [propertyName: string] : (arg0: number) => number;\r\n// }\r\n\r\n// const apply = (f: Filter, DI: DrawInstructions) {\r\n \r\n// }\r\n\r\n// const a: Filter = {\r\n//   'red' : (v) => v*2,\r\n//   'blue' : (v) => v*2,\r\n//   'green' : (v) => v*1.5\r\n// }\r\n\r\n// // function which contains calls to argument\r\n// function draw(ctx: CanvasRenderingContext2D) {\r\n  \r\n//   ctx.rect(0,0,10,10);\r\n// }\r\n\r\n","import { threadId } from 'node:worker_threads';\r\nimport React, { CSSProperties, MouseEventHandler } from 'react';\r\nimport { IndexedThreadPalette, Thread, ThreadDataSource } from '../../types';\r\nimport './Button.css';\r\n\r\ninterface ButtonProps {\r\n    styleDataSource?: ThreadDataSource,\r\n    value?: boolean,\r\n    row: number,\r\n    col: number,\r\n    cellSize: number | {width: number, height: number},\r\n    palette: IndexedThreadPalette,\r\n    thread?: Thread,\r\n    onClickHandler: (e: React.MouseEvent<HTMLDivElement>) => void;\r\n}\r\n\r\nconst Button = (props: ButtonProps) => {\r\n    const style : CSSProperties = {\r\n        gridRow: props.row+1,\r\n        gridColumn: props.col+1\r\n    }\r\n\r\n    if(props.thread) {\r\n        style[\"backgroundColor\"] = props.palette.threadPalette[props.thread.threadPaletteIndex].color;\r\n    }\r\n\r\n    return <div className={\"button \" + (props.value ? \"isActive\" : \"\")}\r\n                style={style}\r\n                onClick={props.onClickHandler}></div>\r\n}\r\n\r\nexport default Button;","import React, { Dispatch, MouseEventHandler, SetStateAction } from 'react';\r\nimport { IndexedThreadPalette, SubGridType } from '../../types';\r\nimport Button from '../Button/Button';\r\nimport './ButtonGrid.scss';\r\n\r\ninterface ButtonGridProps {\r\n    gridValues: boolean[][]; \r\n    // setGridValues: Dispatch<SetStateAction<boolean[][]>>;\r\n    cellSize: number;\r\n    subGridType: SubGridType;\r\n    onClickHandler: (e: React.MouseEvent<HTMLDivElement>, type: SubGridType) => void;\r\n    palette: IndexedThreadPalette;\r\n    className?: string;\r\n}\r\n\r\nconst ButtonGrid = (props: ButtonGridProps) => {\r\n\r\n    const handleButtonClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n        props.onClickHandler(e, props.subGridType);\r\n    }\r\n\r\n    const arrayOfButtons = props.gridValues.map((row, rowIndex) => {\r\n        return row.map((value, colIndex) => {\r\n            return <Button value={value}\r\n                           row={rowIndex}\r\n                           col={colIndex}\r\n                           cellSize={props.cellSize}\r\n                           onClickHandler={handleButtonClick}\r\n                           palette={props.palette}/>\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div className={\"ButtonGrid \" + (props.className ? props.className : \"\")}\r\n             style={{gridTemplateRows: `repeat(1fr, ${props.gridValues.length})`,\r\n                     gridTemplateColumns: `repeat(1fr, ${props.gridValues[0].length})`,\r\n                     width: `${props.gridValues[0].length*props.cellSize}px`,\r\n                     height: `${props.gridValues.length*props.cellSize}px`}}>\r\n            {arrayOfButtons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonGrid;","import { Harness, IndexedThreadPalette, LoomDimensions, LoomState, LoomStateStringRepresentation, Thread, ThreadDataSource, Treadle } from \"../types\";\r\n// import { uuidv4 }  from 'uuid';\r\nconst { v4: uuidv4 } = require('uuid');\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\n\r\nexport const dimensionDefault : LoomDimensions = {\r\n    harnessCount: 4,\r\n    treadleCount: 4,\r\n    warpCount: 16,\r\n    weftCount: 16\r\n}\r\n\r\n// weft 0, warp 1\r\nexport const defaultWeftThreadColor = \"#FFFFFF\";\r\nexport const defaultWarpThreadColor = \"#000000\";\r\nexport const defaultWeftThreadPaletteIndex = 0;\r\nexport const defaultWarpThreadPaletteIndex = 1;\r\n\r\nconst defaultIndexedThreadPalette : IndexedThreadPalette = {\r\n    threadPalette: [createThreadDataSource(defaultWeftThreadColor), createThreadDataSource(defaultWarpThreadColor)],\r\n    selectedIndex: 0\r\n}; \r\n\r\nexport const defaultWeftThread : Thread = {\r\n    id: 0,\r\n    threadPaletteIndex: defaultWeftThreadPaletteIndex\r\n}\r\n\r\nexport const defaultWarpThread : Thread = {\r\n    id: 0,\r\n    threadPaletteIndex: defaultWarpThreadPaletteIndex\r\n}\r\n\r\n\r\nexport const rFromHexString = (str: String) : number => parseInt(str.substring(1,3), 16);\r\nexport const gFromHexString = (str: String) : number => parseInt(str.substring(3,5), 16);\r\nexport const bFromHexString = (str: String) : number => parseInt(str.substring(5,7), 16);\r\n\r\nexport function decamelize(str: string, separator: string){\r\n    separator = typeof separator === 'undefined' ? '_' : separator;\r\n    \r\n    return str\r\n    .replace(/([a-z\\d])([A-Z])/g, '$1' + separator + '$2')\r\n    .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1' + separator + '$2')\r\n    .toLowerCase();\r\n}\r\n\r\nexport const createHarness = () : Harness => {\r\n    return { threads: new Set<Thread>() } \r\n}\r\n\r\nexport const createTreadle = () : Treadle => {\r\n    return { harnesses: new Set<Harness>() } \r\n}\r\n\r\nexport const createThread = (id: number, threadPaletteIndex: number) : Thread => {\r\n    return {\r\n        id,\r\n        threadPaletteIndex\r\n    }\r\n}\r\n\r\nexport function loomDimensionsFromString(obj: LoomStateStringRepresentation) : LoomDimensions {\r\n    const {threading, tieup, treadling} = obj.data;\r\n    const tieupNumbers : number[] = numbersFromString(tieup);\r\n    \r\n    return {\r\n        warpCount: threading.split(',').length,\r\n        weftCount: expandPatternString(treadling).split(',').length,\r\n        treadleCount: tieup.split(',').length,\r\n        harnessCount: Math.max(...tieupNumbers)\r\n    }\r\n}\r\n\r\nfunction expandPatternString(str: string) : string {\r\n    // 1x4 = 1,1,1,1,\r\n    const regex = /(\\d+)x(\\d+)/g;\r\n    let newStr = str.replaceAll(regex, (match, p1, p2) => {\r\n        const newSubstring = (p1+\",\").repeat(p2)\r\n        return newSubstring\r\n    })\r\n    \r\n    newStr = newStr.replaceAll(/,,/g, \",\")\r\n    if (newStr.endsWith(\",\")) \r\n        newStr = newStr.substring(0, newStr.length-1);\r\n    \r\n    return newStr;\r\n}\r\n\r\nfunction numbersFromString(str: string) : number[] {\r\n    const regex = /(\\d+)/g;\r\n    const matches = str.match(regex);\r\n    return matches ? \r\n        matches.map(s => parseInt(s)) :\r\n        [];\r\n}\r\n\r\nexport function createThreadDataSource(color: string) : ThreadDataSource {\r\n    return {\r\n        color: color\r\n    }\r\n}\r\n\r\nexport function createUUID() : string {\r\n    return uuidv4();\r\n}\r\n\r\nexport function createLoomState(dimensions: LoomDimensions) : LoomState {\r\n\r\n    const harnesses = (harnessCount: number) : Array<Harness> => {\r\n        return new Array(harnessCount).fill(createHarness()).map(_ => createHarness());\r\n    }\r\n\r\n    const warpThreads = (warpCount: number) : Array<Thread> => {\r\n        return new Array(warpCount).fill(defaultWarpThread).map((_, i) => createThread(i, defaultWarpThreadPaletteIndex));\r\n    }\r\n\r\n    const weftThreads = (warpCount: number) : Array<Thread> => {\r\n        return new Array(warpCount).fill(defaultWeftThread).map((_, i) => createThread(i, defaultWeftThreadPaletteIndex));\r\n    }\r\n\r\n    const treadles = (treadleCount: number) : Array<Treadle> => {\r\n        return new Array(treadleCount).fill(createTreadle()).map(_ => createTreadle());\r\n    }\r\n\r\n    const treadlingInstructions = (weftCount: number) => {\r\n        return new Array(weftCount).fill(null);\r\n    }\r\n\r\n    return {\r\n        id: createUUID(),\r\n        dimensions,\r\n        harnesses: harnesses(dimensions.harnessCount),\r\n        warpThreads: warpThreads(dimensions.warpCount),\r\n        weftThreads: weftThreads(dimensions.weftCount),\r\n        treadles: treadles(dimensions.treadleCount),\r\n        treadlingInstructions: treadlingInstructions(dimensions.weftCount),\r\n        threadDataSource: { color: \"#FFFFFF\" },\r\n        name: \"untitled\",\r\n        indexedThreadPalette: (cloneDeep(defaultIndexedThreadPalette))\r\n    }\r\n}\r\n\r\ntype LoomPart<T> = {\r\n    [setName: string]: Set<T>\r\n}\r\n\r\nexport const convertLoomStateToJSON = (state: LoomState) : string => {\r\n    return JSON.stringify({\r\n        id: state.id,\r\n        dimensions: state.dimensions,\r\n        treadles: convertLoomPartToJSON(state.treadles, state.harnesses),\r\n        harnesses: convertLoomPartToJSON(state.harnesses, state.warpThreads),\r\n        treadlingInstructions: state.treadlingInstructions.map(treadle => treadle ? state.treadles.indexOf(treadle) : -1),\r\n        warpThreads: state.warpThreads,//.map(thread => convertThreadToJSON(thread)),\r\n        weftThreads: state.weftThreads,//.map(thread => convertThreadToJSON(thread)),\r\n        threadDataSource: state.threadDataSource,\r\n        name: state.name,\r\n        indexedThreadPalette: state.indexedThreadPalette\r\n    })\r\n}\r\n\r\nexport const convertJSONToLoomState = (jsonData: string) : LoomState => {\r\n    const state = JSON.parse(jsonData);\r\n    state.harnesses = state.harnesses.map((subArr : Array<number>) => {\r\n        const harness: Harness = createHarness();\r\n        subArr.forEach((index: number) => { harness.threads.add(state.warpThreads[index])});\r\n        return harness;\r\n    })\r\n    state.treadles = state.treadles.map((subArr: Array<number>) => {\r\n        const treadle : Treadle = createTreadle();\r\n        subArr.forEach((index: number) => { treadle.harnesses.add(state.harnesses[index])});\r\n        return treadle;\r\n    })\r\n    state.treadlingInstructions = state.treadlingInstructions.map((index: number) => state.treadles[index]);\r\n    return state;\r\n}\r\n\r\n// treadlingInstructions is an array of references to treadles\r\n// a harness is an object containing a property which is a set of threads\r\n// a treadle is an object containing a property which is a set of harnesses\r\n// a thread is a datasource\r\nfunction convertLoomPartToJSON<T>(partArr: Array<LoomPart<T>>, refArr: Array<T>) : Array<Array<number>> {\r\n    // iterate through all items in set, push indexOf item in refArr to newArr\r\n    const indexes : Array<Array<number>> = [];\r\n    partArr.forEach((part, i) => {\r\n        indexes.push([]);\r\n        if(\"harnesses\" in part) {\r\n            // part is treadle, T is harness\r\n            part.harnesses.forEach((harness : T) => {\r\n                indexes[i].push(refArr.indexOf(harness));\r\n            })\r\n\r\n        } else if (\"threads\" in part) {\r\n            // part is harness, T is thread\r\n            part.threads.forEach((thread : T) => {\r\n                indexes[i].push(refArr.indexOf(thread));\r\n            })\r\n        }\r\n    })\r\n    return indexes;\r\n}\r\n\r\nexport function createLoomStateFromStringDataRepesentation(obj: LoomStateStringRepresentation) : LoomState {\r\n    const state = createLoomState(loomDimensionsFromString(obj));\r\n    const {threading, tieup, treadling} = obj.data;\r\n\r\n    // parse threading\r\n    // connect harness to warp threads\r\n    threading.split(',')\r\n    .reverse()\r\n        .map(s => parseInt(s))\r\n        .forEach((harnessIndex, warpThreadIndex) => {\r\n            const invertedHarnessIndex = state.harnesses.length - harnessIndex; //  (n - [1,n]) -> [n-1, 0]\r\n            state.harnesses[invertedHarnessIndex].threads.add(state.warpThreads[warpThreadIndex])\r\n        })\r\n\r\n    // parse tieup\r\n    // connect treadles to harnesses\r\n    tieup.split(',')\r\n         .map(treadleConnections => treadleConnections.split('+')\r\n                                                       .map(s => parseInt(s)))\r\n         .forEach((harnessIndexes, treadleIndex) => {\r\n            harnessIndexes.forEach(harnessIndex => {\r\n                const inverseHarnessIndex = (state.harnesses.length-1) - (harnessIndex-1);\r\n                state.treadles[treadleIndex].harnesses.add(state.harnesses[inverseHarnessIndex])\r\n            })\r\n         })\r\n    \r\n\r\n    // parse treadling\r\n    // write treadling instructions\r\n    expandPatternString(treadling)\r\n        .split(',')\r\n        .map(s => parseInt(s))\r\n        .forEach((treadleIndex, treadlingInstructionIndex) => {\r\n            state.treadlingInstructions[treadlingInstructionIndex] = state.treadles[treadleIndex-1];\r\n        })\r\n\r\n    state.name = obj.name;\r\n\r\n    return state;\r\n}\r\n\r\nexport function setRectangle(gl: WebGL2RenderingContext, x: number, y: number, width: number, height: number) {\r\n    var x1 = x;\r\n    var x2 = x + width;\r\n    var y1 = y;\r\n    var y2 = y + height;\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n       x1, y1,\r\n       x2, y1,\r\n       x1, y2,\r\n       x1, y2,\r\n       x2, y1,\r\n       x2, y2,\r\n    ]), gl.STATIC_DRAW);\r\n  }","import React, { forwardRef, useMemo } from 'react'\r\nimport { Uniform } from 'three'\r\nimport { Effect } from 'postprocessing'\r\n\r\nconst fragmentShader = `varying vec2 vUv;\r\nvoid main() {\r\n    gl_FragColor.rgba = vec4(1.,1.,1.,1.);\r\n}`\r\n\r\nlet _uParam\r\n\r\n// Effect implementation\r\nclass MyCustomEffectImpl extends Effect {\r\n    // bizarre default object destructuring type of thing\r\n    // what i think is happening is that the constructor expects an object\r\n    // and destructures param from said object\r\n    // and if param does not exist withing said object\r\n    // its default values is 0.1\r\n  constructor({ param = 0.1 } = {}) {\r\n    super('MyCustomEffect', fragmentShader, {\r\n      uniforms: new Map([['param', new Uniform(param)]]),\r\n    })\r\n\r\n    _uParam = param\r\n  }\r\n\r\n  update(renderer, inputBuffer, deltaTime) {\r\n    this.uniforms.get('param').value = _uParam\r\n  }\r\n}\r\n\r\n// Effect component\r\nconst MyCustomEffect = forwardRef(({ param }, ref) => {\r\n  const effect = useMemo(() => new MyCustomEffectImpl(param), [param])\r\n  return <primitive ref={ref} object={effect} dispose={null} />\r\n})\r\n\r\nexport default { MyCustomEffect };","import { useEffect, useState } from \"react\";\r\nimport { LoomDimensions } from \"../../types\"\r\nimport { decamelize } from \"../../utils\";\r\nimport './DimensionsEditor.css'\r\n\r\ninterface DimensionsEditorProps {\r\n    dimensions: LoomDimensions\r\n    onDimensionsChange : (...args: any) => void\r\n}\r\n\r\nexport const DimensionsEditor = (props: DimensionsEditorProps) => {\r\n\r\n    const [localDimensions, setLocalDimensions] = useState(props.dimensions);\r\n    \r\n    useEffect( () => {\r\n        setLocalDimensions(props.dimensions);\r\n    }, [props.dimensions])\r\n\r\n\r\n    const onSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        props.onDimensionsChange(localDimensions);\r\n    }\r\n\r\n    const handleChange = (e : any) => {\r\n        e.preventDefault();\r\n        setLocalDimensions({...localDimensions, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    const formItems = Object.keys(props.dimensions).map((dimensionKey : string) => {\r\n        return (\r\n            <>\r\n            <label className=\"InputLabel\" htmlFor={dimensionKey}>{decamelize(dimensionKey, \" \") + \" \"}</label>\r\n            <input className=\"InputField\" style={{display: \"inline\"}} type=\"textfield\" name={dimensionKey} onChange={handleChange} placeholder={props.dimensions[dimensionKey].toString()}></input>\r\n            <p className=\"CurrentDimension\" style={{display: \"inline\"}}>{`→ ${props.dimensions[dimensionKey]}`}</p>\r\n            <br/>\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"Panel\">\r\n        <h1 className=\"FormHeader\">Dimensions Editor</h1>\r\n        <div className=\"PanelContent\">\r\n            <form className=\"DimensionsForm\" onSubmit={onSubmit}>\r\n                {formItems}\r\n                {/* <label style={{verticalAlign: \"top\"}} htmlFor=\"scaleSlider\">scale </label>\r\n                <input type=\"range\" min=\"1\" max=\"8\" defaultValue=\"1\" id=\"scaleSlider\" onChange={props.weaveDisplayScalarOnChange}/><br/> */}\r\n                <button className=\"ApplyBtn\" type=\"submit\">Apply</button>\r\n            </form>\r\n        </div>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from 'react';\r\nimport { IndexedThreadPalette, Thread, ThreadDataSource } from '../../types';\r\nimport { createThread, createThreadDataSource } from '../../utils';\r\nimport './ThreadEditor.css'\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\ninterface ThreadEditorProps {\r\n    indexedThreadPalette: IndexedThreadPalette\r\n    onSelectThreadDataSource: (index: number) => void\r\n    onSetThreadDataSource: (threadDataSource: ThreadDataSource) => void\r\n    onAddThreadDataSource: (threadDataSource: ThreadDataSource) => void\r\n}\r\n\r\nexport const ThreadEditor = (props: ThreadEditorProps) => {\r\n    const [newThreadDataSource, setNewThreadDataSource] = useState<ThreadDataSource>(createThreadDataSource(\"000000\"));\r\n    const [paletteLock, setPaletteLock] = useState<boolean>(true);\r\n\r\n    const handleColorPickerOnChange = (e: any) => {\r\n        if(!paletteLock){\r\n            const newThreadDataSource = {...props.indexedThreadPalette.threadPalette[props.indexedThreadPalette.selectedIndex], color: e.target.value}\r\n            props.onSetThreadDataSource(newThreadDataSource);\r\n        }\r\n        setNewThreadDataSource({...newThreadDataSource, color: e.target.value})\r\n    }\r\n\r\n    const handleAddThreadOnClick = (e: any) => {\r\n        props.onAddThreadDataSource(newThreadDataSource);\r\n    }\r\n\r\n    const togglePaletteLock = () => {\r\n        setPaletteLock(!paletteLock);\r\n    }\r\n\r\n    const threadItems = props.indexedThreadPalette.threadPalette.map((threadDataSource, i) => {\r\n        const classes = \"Thread\" + ((i==props.indexedThreadPalette.selectedIndex) ? \" selected\" : \"\");\r\n        // console.log(threadDataSource.color);\r\n        return <div className={classes} \r\n                    id={\"thread-\"+i.toString()} \r\n                    style={{backgroundColor: threadDataSource.color}}\r\n                    onClick={(e: any) => {props.onSelectThreadDataSource(e.target.id.split('-')[1])}}/>\r\n    })\r\n    \r\n    return (\r\n        <div className=\"ThreadEditorContainer Panel\">\r\n            <h1>Thread Palette</h1>\r\n            <div className=\"PanelContent\">\r\n                <div className=\"ThreadContainer\">\r\n                    {threadItems}\r\n                    <button className=\"AddThreadButton\"\r\n                            onClick={handleAddThreadOnClick}>+</button>\r\n                </div>\r\n                <div className=\"ThreadAttributeDesigner\">\r\n                    <input className=\"ColorPicker\" type=\"color\" id=\"ColorPicker\" onChange={handleColorPickerOnChange}></input>\r\n                </div>\r\n                <button className=\"LockBtn\" onClick={togglePaletteLock}>{paletteLock ? \"Unlock Palette\" : \"Lock Palette\"}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { Dispatch, MouseEventHandler, SetStateAction } from 'react';\r\nimport { IndexedThreadPalette, Orientation, SubGridType, Thread } from '../../types';\r\nimport Button from '../Button/Button';\r\nimport '../ButtonGrid/ButtonGrid.scss';\r\n\r\ninterface ThreadButtonGridProps {\r\n    gridValues: Thread[];\r\n    orientation: Orientation;\r\n    // setGridValues: Dispatch<SetStateAction<boolean[][]>>;\r\n    cellSize: {width: number, height: number};\r\n    subGridType: SubGridType;\r\n    onClickHandler: (e: React.MouseEvent<HTMLDivElement>, subGridType: SubGridType) => void;\r\n    palette: IndexedThreadPalette;\r\n    className?: string;\r\n}\r\n\r\nconst ThreadButtonGrid = (props: ThreadButtonGridProps) => {\r\n\r\n    const buttonOnClickHandler = (e: any) => {\r\n        props.onClickHandler(e, props.subGridType);\r\n    }\r\n\r\n    const arrayOfButtons = props.gridValues.map((item, index) => {\r\n        return <Button  styleDataSource={props.palette.threadPalette[item.threadPaletteIndex]}\r\n                        col={(props.orientation===Orientation.HORIZONTAL) ? index : 0}\r\n                        row={(props.orientation===Orientation.VERTICAL) ? index : 0}\r\n                        cellSize={{width: props.cellSize.width, height: props.cellSize.height}}\r\n                        onClickHandler={buttonOnClickHandler}\r\n                        thread={props.gridValues[index]}\r\n                        palette={props.palette}/>\r\n    })\r\n\r\n    return (\r\n        <div className={\"ButtonGrid \" + (props.className ? props.className : \"\")}\r\n             style={{gridTemplateColumns: `repeat(1fr, ${props.orientation===Orientation.VERTICAL ? props.gridValues.length : 1})`,\r\n                     gridTemplateRows: `repeat(1fr, ${props.orientation===Orientation.HORIZONTAL ? props.gridValues.length : 1})`,\r\n                     width: `${(props.orientation===Orientation.HORIZONTAL ? props.gridValues.length : 1)*props.cellSize.width}px`,\r\n                     height: `${(props.orientation===Orientation.VERTICAL ? props.gridValues.length : 1)*props.cellSize.height}px`}}>\r\n            {arrayOfButtons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThreadButtonGrid;","const ImageEditor = (props: any) => {\r\n    return (\r\n        <div className=\"Panel\">\r\n            <h1 className=\"FormHeader\">Image Editor</h1>\r\n            <div className=\"PanelContent\">\r\n                {props.children}\r\n                {/* <form className=\"ImageForm\" onSubmit={onSubmit}>\r\n                    {formItems}\r\n                    <label style={{verticalAlign: \"top\"}} htmlFor=\"scaleSlider\">scale </label>\r\n                    <input type=\"range\" min=\"1\" max=\"8\" defaultValue=\"1\" id=\"scaleSlider\" onChange={props.weaveDisplayScalarOnChange}/><br/>\r\n                    <button className=\"ApplyBtn\" type=\"submit\">Apply</button>\r\n                </form> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageEditor;","import * as THREE from \"three\";\r\nimport {extend} from \"@react-three/fiber\"\r\nimport { DataTexture } from \"three\";\r\nimport { shaderMaterial } from \"@react-three/drei\";\r\n\r\nconst defaultDataBuffer = new Uint8Array(3);\r\n\r\nexport const WeaveDisplayMaterial = shaderMaterial(\r\n    {\r\n        patternDataTexture: new DataTexture(defaultDataBuffer,1,1,THREE.RGBFormat),\r\n        repeats: 1\r\n    },\r\n    `\r\nvarying vec2 vUv;\r\nvoid main() {\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}\r\n`,\r\n    `varying vec2 vUv;\r\nuniform float repeats;\r\nuniform sampler2D patternDataTexture;\r\nvoid main() {\r\n    vec2 uv = vUv * repeats;\r\n    uv = uv - floor(uv);\r\n    uv.y = 1. - uv.y;\r\n    gl_FragColor.rgba = texture2D(patternDataTexture, uv);\r\n    gl_FragColor.a = 1.;\r\n}\r\n`\r\n)\r\n\r\nextend({ WeaveDisplayMaterial })\r\n\r\ntype WeaveDisplayMaterialImplementation = {\r\n    patternDataTexture: DataTexture\r\n    repeats: number\r\n  } & JSX.IntrinsicElements['shaderMaterial']\r\n  \r\n  \r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            weaveDisplayMaterial: WeaveDisplayMaterialImplementation\r\n        }\r\n    }\r\n}","import { OrbitControls, OrthographicCamera, PerspectiveCamera, shaderMaterial } from '@react-three/drei';\r\n// import { DepthOfField, DotScreen, EffectComposer, Noise } from '@react-three/postprocessing';\r\nimport React, { Suspense, useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Camera, Mesh } from 'three';\r\nimport { rFromHexString, bFromHexString, gFromHexString } from '../../utils';\r\nimport './CustomBlurEffect.js';\r\n// import { BlurPassEffect } from './CustomBlurEffect';\r\nimport \"./WeaveDisplayMaterial\";\r\n\r\nimport { useFrame, useThree } from '@react-three/fiber'\r\nimport { ColorAverage, DepthOfField, EffectComposer, Noise, Pixelation } from '@react-three/postprocessing';\r\nimport { CameraMode } from '../../types';\r\n\r\nfunction Foo() {\r\n    const state = useThree();\r\n    return state;\r\n}\r\n\r\nconst createPatternDataTexture = (width: number, height: number, buffer: string[]) => {\r\n    console.log(buffer);\r\n    const size = width * height;\r\n    const patternData = new Uint8Array( 3 * size );\r\n\r\n    for(let i = 0; i < size; i++) {\r\n        const stride = i*3;\r\n\r\n        const r = rFromHexString(buffer[i]);\r\n        const g = gFromHexString(buffer[i]);\r\n        const b = bFromHexString(buffer[i]);\r\n\r\n        patternData[stride    ] = r;\r\n        patternData[stride + 1] = g;\r\n        patternData[stride + 2] = b;\r\n    }\r\n\r\n    const patternTexture = new THREE.DataTexture(patternData, width, height, THREE.RGBFormat);\r\n    return patternTexture;\r\n}\r\n\r\ninterface SceneProps {\r\n    warpThreadCount: number,\r\n    weftThreadCount: number,\r\n    unitSize: number,\r\n    repeats: number,\r\n    colorBuffer: string[],\r\n    cameraMode: CameraMode\r\n}\r\n\r\nconst initialPatternDataTexture = createPatternDataTexture(2,2,[\"#ffffff\", \"#000000\", \"#ffffff\", \"#000000\"]);\r\n\r\nfunction Scene(props: SceneProps) {\r\n    const myMesh = useRef<Mesh>();\r\n    const perspectiveCameraRef = useRef<typeof PerspectiveCamera>();\r\n    const [patternDataTexture, setPatternDataTexture] = useState(initialPatternDataTexture);\r\n    const threeState = Foo();\r\n\r\n    const max = () => Math.max(props.warpThreadCount, props.weftThreadCount);\r\n    const perspectivePlaneWidth = () => (props.warpThreadCount / max());\r\n    const perspectivePlaneHeight = () => (props.weftThreadCount / max());\r\n    const aspect = () => (perspectivePlaneWidth() / perspectivePlaneHeight());\r\n    const vFov = () => Math.atan(perspectivePlaneHeight() / 2) * (360 / Math.PI);\r\n    const hFov = () => 2 * Math.atan( Math.tan( vFov() * Math.PI / 180 / 2 ) * aspect() ) * 180 / Math.PI;\r\n\r\n    console.log(\"aspect: \" + aspect() + \"\\nvFov: \" + vFov() + \"\\nhFov: \"+ hFov() + \"\\nplaneH: \" + perspectivePlaneHeight() + \"\\nplaneW: \"+ perspectivePlaneWidth());\r\n\r\n\r\n    useEffect(() => {\r\n        setPatternDataTexture(createPatternDataTexture(props.warpThreadCount, props.weftThreadCount, props.colorBuffer));\r\n        patternDataTexture.needsUpdate = true;\r\n        console.log(\"cam ref: \", (perspectiveCameraRef.current));\r\n        console.log(\"state ref: \", threeState.camera);\r\n        if(\"fov\" in threeState.camera){\r\n            threeState.camera.fov = vFov();\r\n        }\r\n    }, [props])\r\n\r\n    // const maxNumThreadTypes = 2;\r\n    // const paletteTextureWidth = maxNumThreadTypes;\r\n    // const paletteTextureHeight = 1;\r\n    // const palette = new Uint8Array(paletteTextureWidth * 3);\r\n    // const paletteTexture = new THREE.DataTexture(\r\n    //     palette, paletteTextureWidth, paletteTextureHeight, THREE.RGBFormat);\r\n\r\n    // paletteTexture.minFilter = THREE.NearestFilter;\r\n    // paletteTexture.magFilter = THREE.NearestFilter;\r\n\r\n    // palette.set([255,0,0], 0);\r\n    // palette.set([0,0,255], 1);\r\n\r\n    // paletteTexture.needsUpdate = true;\r\n    \r\n    const canvasWidth = props.warpThreadCount * props.unitSize;\r\n    const canvasHeight = props.weftThreadCount * props.unitSize;\r\n\r\n    return (\r\n        <>\r\n            { (props.cameraMode === CameraMode.Orthographic) &&\r\n             <OrthographicCamera\r\n                makeDefault\r\n                args={[canvasWidth / -2, canvasWidth / 2, canvasHeight / 2, canvasHeight / -2, 0, 1000]} />\r\n            }\r\n            { (props.cameraMode === CameraMode.Perspective) &&\r\n            <PerspectiveCamera\r\n                makeDefault\r\n                position={[0,0,1]}\r\n                args={[vFov(), aspect(), .1, 2000]}\r\n                ref={perspectiveCameraRef}\r\n                />\r\n            }\r\n            <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />\r\n            <mesh ref={myMesh}>\r\n                <planeGeometry attach='geometry' args={props.cameraMode === CameraMode.Orthographic ? \r\n                    [canvasWidth,canvasHeight,1,1] :\r\n                    [perspectivePlaneWidth(),perspectivePlaneHeight(),1,1]} />\r\n                <weaveDisplayMaterial attach='material' patternDataTexture={patternDataTexture} repeats={props.repeats}/>\r\n            </mesh>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Scene;\r\n\r\n\r\n{/*\r\n<mesh>\r\n                <boxGeometry attach=\"geometry\" args={[1,1,1]}></boxGeometry>\r\n                <meshBasicMaterial color={0xffffff}/>\r\n            </mesh>\r\n*/}\r\n","import React, { useEffect, useReducer, useRef, useState } from \"react\";\r\nimport WeaveDisplay from \"../WeaveDisplay/WeaveDisplay\"\r\nimport ButtonGrid from \"../ButtonGrid/ButtonGrid\"\r\nimport {LoomActionType, LoomAction, LoomState, Harness, Treadle, Thread, DrawingInstruction, Color, LoomDimensions, Orientation, SubGridType, ThreadDataSource, DrawingInstructionWGL, CameraMode} from '../../types';\r\nimport {createThread, createTreadle, createHarness, dimensionDefault, defaultWarpThread, defaultWeftThread, defaultWarpThreadColor, defaultWeftThreadColor, createLoomState, setRectangle, defaultWarpThreadPaletteIndex, defaultWeftThreadPaletteIndex} from '../../utils';\r\nimport './LoomEditor.scss'\r\nimport { DimensionsEditor } from \"../DimensionsEditor/DimensionsEditor\";\r\nimport { SaveLoadMenu } from \"../SaveLoadMenu/SaveLoadMenu\";\r\nimport { ThreadEditor } from \"../ThreadEditor/ThreadEditor\";\r\nimport ThreadButtonGrid from \"../ThreadButtonGrid/ThreadButtonGrid\";\r\nimport ImageEditor from \"../ImageEditor/ImageEditor\";\r\nimport { serialize } from \"node:v8\";\r\nimport Scene from \"../WeaveDisplay/WeaveDisplayThree\";\r\nimport { Canvas } from 'react-three-fiber';\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\nfunction reducer(state: LoomState, action: LoomAction) : LoomState {\r\n    const stateCopy : LoomState = cloneDeep(state);\r\n\r\n    switch(action.type) {\r\n        case LoomActionType.SET_HARNESSTOTHREADATTACHMENTS:\r\n            // LEFT TABLE\r\n            { // block-scope for local consts\r\n            const harness : Harness = stateCopy.harnesses[action.harnessID];\r\n            const thread : Thread = stateCopy.warpThreads[action.threadID];\r\n\r\n            if(harness.threads.has(thread)) {\r\n                harness.threads.delete(thread);\r\n            } else {\r\n                for(let i = 0; i < stateCopy.harnesses.length; i++) {\r\n                    if(stateCopy.harnesses[i].threads.has(thread)) {\r\n                        stateCopy.harnesses[i].threads.delete(thread);\r\n                    }\r\n                }\r\n                harness.threads.add(thread);\r\n            }\r\n            }\r\n            break;\r\n        case LoomActionType.SET_TREADLETOHARNESSATTACHMENTS:\r\n            // TIEUP\r\n            { // block-scope for local consts\r\n            const treadle : Treadle = stateCopy.treadles[action.treadleID];\r\n            const harness : Harness = stateCopy.harnesses[action.harnessID];\r\n            \r\n            if(treadle.harnesses.has(harness)) {\r\n                treadle.harnesses.delete(harness);\r\n            } else {\r\n                treadle.harnesses.add(harness);\r\n            }\r\n            }\r\n            break;\r\n        case LoomActionType.SET_TREADLINGINSTRUCTION:\r\n            // RIGHT TABLE\r\n            {\r\n            const treadle : Treadle = stateCopy.treadles[action.treadleID];\r\n            if(stateCopy.treadlingInstructions[action.instructionIndex] === treadle) {\r\n                stateCopy.treadlingInstructions[action.instructionIndex] = null;\r\n            } else {\r\n                stateCopy.treadlingInstructions[action.instructionIndex] = treadle;\r\n            }\r\n            }\r\n            break;\r\n        case LoomActionType.SET_HARNESSCOUNT:\r\n            if(action.harnessCount > stateCopy.harnesses.length){\r\n                while(stateCopy.harnesses.length < action.harnessCount) {\r\n                    stateCopy.harnesses.unshift(createHarness());\r\n                }\r\n            } else {\r\n                const removedHarnesses = stateCopy.harnesses.splice(0, stateCopy.harnesses.length - action.harnessCount);\r\n                stateCopy.treadles.forEach(treadle => {\r\n                    removedHarnesses.forEach(harness => {\r\n                        treadle.harnesses.delete(harness);\r\n                    })\r\n                })\r\n            }\r\n            stateCopy.dimensions.harnessCount = action.harnessCount;\r\n            break;\r\n        case LoomActionType.SET_TREADLECOUNT:\r\n            if(action.treadleCount > stateCopy.treadles.length){\r\n                while(stateCopy.treadles.length < action.treadleCount) {\r\n                    stateCopy.treadles.push(createTreadle());\r\n                }\r\n            } else {\r\n                const removedTreadles = stateCopy.treadles.splice(action.treadleCount);\r\n                stateCopy.treadlingInstructions.forEach(instruction => {\r\n                    removedTreadles.forEach(removedTreadle => {\r\n                        instruction = ( instruction === removedTreadle ) ? null : instruction;\r\n                    })\r\n                })\r\n            }\r\n            stateCopy.dimensions.treadleCount = action.treadleCount;\r\n            break;\r\n        case LoomActionType.SET_WARPCOUNT:\r\n            if (action.warpCount > state.warpThreads.length) {\r\n                while(stateCopy.warpThreads.length < action.warpCount) {\r\n                    stateCopy.warpThreads.unshift(createThread(stateCopy.warpThreads.length, defaultWarpThreadPaletteIndex));\r\n                }\r\n            } else {\r\n                stateCopy.warpThreads.splice(0, stateCopy.warpThreads.length - action.warpCount);\r\n            }\r\n            stateCopy.warpThreads.forEach((wt, i) => {\r\n                wt.id = i;\r\n            });\r\n            stateCopy.dimensions.warpCount = action.warpCount;\r\n            break;\r\n        case LoomActionType.SET_WEFTCOUNT:\r\n            // weft and treadling instruction\r\n            if (action.weftCount > state.weftThreads.length) {\r\n                while(stateCopy.weftThreads.length < action.weftCount) {\r\n                    stateCopy.weftThreads.push(createThread(stateCopy.weftThreads.length, defaultWeftThreadPaletteIndex));\r\n                    stateCopy.treadlingInstructions.push(null);\r\n                }\r\n            } else {\r\n                stateCopy.weftThreads.splice(action.weftCount);\r\n                stateCopy.treadlingInstructions.splice(action.weftCount);\r\n            }\r\n            stateCopy.dimensions.weftCount = action.weftCount;\r\n            break;\r\n        case LoomActionType.SET_STATE:\r\n            const newState = action.state;\r\n            return newState;\r\n            break;\r\n        case LoomActionType.SET_WARPTHREADTHREADPALETTEINDEX:\r\n            // stateCopy.warpThreads[action.warpThreadID].dataSource = stateCopy.indexedThreadPalette.threadPalette[stateCopy.indexedThreadPalette.selectedIndex];\r\n            stateCopy.warpThreads[action.warpThreadID].threadPaletteIndex = stateCopy.indexedThreadPalette.selectedIndex;\r\n            break;\r\n        case LoomActionType.SET_WEFTTHREADTHREADPALETTEINDEX:\r\n            // stateCopy.weftThreads[action.weftThreadID].dataSource = stateCopy.indexedThreadPalette.threadPalette[stateCopy.indexedThreadPalette.selectedIndex];\r\n            stateCopy.weftThreads[action.weftThreadID].threadPaletteIndex = stateCopy.indexedThreadPalette.selectedIndex;\r\n            break;\r\n        case LoomActionType.SET_SELECTEDTHREADDATASOURCE:\r\n            stateCopy.indexedThreadPalette.threadPalette[stateCopy.indexedThreadPalette.selectedIndex] = action.dataSource;\r\n            break;\r\n        case LoomActionType.ADD_THREADDATASOURCE:\r\n            stateCopy.indexedThreadPalette.threadPalette.push(cloneDeep(action.dataSource));\r\n            break;\r\n        case LoomActionType.SET_SELECTEDTHREADDATASOURCEINDEX:\r\n            stateCopy.indexedThreadPalette.selectedIndex = action.dataSourceIndex;\r\n        // case LoomActionyType.SET_\r\n    }\r\n    // actions\r\n    return stateCopy;\r\n}\r\n\r\ninterface LoomProps {\r\n    currentState: LoomState,\r\n    onChange: (...args: any) => void,\r\n    cameraMode: CameraMode\r\n}\r\n\r\nconst Loom = (props: LoomProps) => {\r\n    const [state, dispatch] = useReducer(reducer, createLoomState(dimensionDefault));\r\n\r\n    // IMAGE PROPERTIES\r\n    const [imageCellSize, setImageCellSize] = useState<number>(16);\r\n    const [imageScale, setImageScale] = useState<number>(1);\r\n    const [imageThreadWidth, setImageThreadWidth] = useState<number>(100);\r\n    const [imageBackgroundColor, setImageBackgroundColor] = useState<string>(\"#000000\");\r\n    const [imageUnitSize, setImageUnitSize] = useState<number>(imageCellSize);\r\n    const [imageUnitCellLock, setImageUnitCellLock] = useState<boolean>(true);\r\n\r\n    useEffect(() => {   \r\n        dispatch({ type: LoomActionType.SET_STATE, state: props.currentState });\r\n    }, [props.currentState]); //, [(props.currentState)]\r\n\r\n    useEffect(() => {\r\n        props.onChange(state);\r\n    }, [state]);\r\n\r\n    const loomGridOnClickEventHandler = (e: any, type: SubGridType) => {\r\n        const target = e.target as HTMLDivElement;\r\n        const gridRow : number = parseInt(target.style.gridRow)-1;\r\n        const gridCol : number = parseInt(target.style.gridColumn)-1;\r\n        switch(type) {\r\n            case SubGridType.HARNESSTOTHREADTABLE:\r\n                dispatch({type: LoomActionType.SET_HARNESSTOTHREADATTACHMENTS, harnessID: gridRow, threadID: gridCol});\r\n                break;\r\n            case SubGridType.TIEUPTABLE:\r\n                dispatch({type: LoomActionType.SET_TREADLETOHARNESSATTACHMENTS, treadleID: gridCol, harnessID: gridRow});\r\n                break;\r\n            case SubGridType.TREADLINGTABLE:\r\n                dispatch({type: LoomActionType.SET_TREADLINGINSTRUCTION, treadleID: gridCol, instructionIndex: gridRow});\r\n                break;\r\n            case SubGridType.WEFTTHREADTABLE:\r\n                // Weft thread data source change\r\n                dispatch({type: LoomActionType.SET_WEFTTHREADTHREADPALETTEINDEX, weftThreadID: gridRow});\r\n                break;\r\n            case SubGridType.WARPTHREADTABLE:\r\n                // Warp thread data source change\r\n                dispatch({type: LoomActionType.SET_WARPTHREADTHREADPALETTEINDEX, warpThreadID: gridCol});\r\n                break;\r\n        }\r\n    }\r\n\r\n    const topGridValues = (warpThreads: Thread[], harnesses: Harness[]) : Array<Array<boolean>> => {\r\n        const gridValues : boolean[][] = new Array<Array<boolean>>(harnesses.length).fill(new Array<boolean>()).map((_, rowIndex) => {\r\n            return new Array<boolean>(warpThreads.length).fill(false).map((_, colIndex) => {\r\n                return harnesses[rowIndex].threads.has(warpThreads[colIndex]);\r\n            })\r\n        });\r\n        return gridValues;\r\n    }\r\n\r\n    const tieup = (harnesses: Harness[], treadles: Treadle[]) => {\r\n        const gridValues : boolean[][] = new Array<Array<boolean>>(harnesses.length).fill(new Array<boolean>()).map((_, rowIndex) => {\r\n            return new Array<boolean>(treadles.length).fill(false).map((_, colIndex) => {\r\n                return treadles[colIndex].harnesses.has(harnesses[rowIndex]);\r\n            })\r\n        });\r\n        return gridValues;\r\n    }\r\n\r\n    const rightGridValues = (treadles: Treadle[], treadlingInstructions: (Treadle | null)[]) => {\r\n        const gridValues : boolean[][] = new Array<Array<boolean>>(treadlingInstructions.length).fill(new Array<boolean>()).map((_, rowIndex) => {\r\n            return new Array<boolean>(treadles.length).fill(false).map((_, colIndex) => {\r\n                return treadlingInstructions[rowIndex] === treadles[colIndex];\r\n            })\r\n        });\r\n        return gridValues;\r\n    }\r\n\r\n    // const standardWarpDrawInstruction = (x: number, y: number, width: number, height: number, color: string) : DrawingInstruction => {\r\n    //     return ((ctx: CanvasRenderingContext2D) => {\r\n    //         ctx.rect(x,y,width,height);\r\n    //         ctx.fillStyle = color;\r\n    //     })\r\n    // }\r\n\r\n    // const standardWeftDrawInstruction = (y: number, width: number, height: number, color: string) : DrawingInstruction => {\r\n    //     return ((ctx: CanvasRenderingContext2D) => {\r\n    //         ctx.rect(0, y, width, height);\r\n    //         ctx.fillStyle = color;\r\n    //     })\r\n    // }\r\n\r\n    // const backgroundWarpDrawInstruction = (x: number, width: number, height: number, color: string) : DrawingInstruction => {\r\n    //     return ((ctx: CanvasRenderingContext2D) => {\r\n    //         ctx.rect(x, 0, width, height);\r\n    //         ctx.fillStyle = color;\r\n    //     })\r\n    // }\r\n\r\n    // const weaveDisplayDrawingInstructions = (state: LoomState): DrawingInstruction[] => {\r\n    //     const instructions : DrawingInstruction[] = [];\r\n    //     const size = imageCellSize;\r\n    //     const threadSize = imageCellSize * (imageThreadWidth / 100.);\r\n    //     const halfThreadSizeDifference = (size - threadSize);\r\n    //     const hTSD = halfThreadSizeDifference;\r\n\r\n    //     state.warpThreads.forEach((warpThread, col) => {\r\n    //         instructions.push(backgroundWarpDrawInstruction((col*size)+hTSD, size-hTSD, state.weftThreads.length*size, warpThread.dataSource.color));\r\n    //     })\r\n        \r\n    //     state.weftThreads.forEach((weftThread, row) => {\r\n    //         // instructions.push(standardWeftDrawInstruction(row*size, state.warpThreads.length*size, size, weftThread.dataSource.color))\r\n    //         instructions.push(standardWeftDrawInstruction((row*size)+hTSD, state.warpThreads.length*size, size-hTSD, weftThread.dataSource.color))\r\n    //     })\r\n\r\n    //     state.treadlingInstructions.forEach((treadle, row) => {\r\n    //         if(treadle){\r\n    //             treadle.harnesses.forEach(harness => {\r\n    //                 harness.threads.forEach(warpThread => {\r\n    //                     instructions.push(standardWarpDrawInstruction((warpThread.id*size)+hTSD, row*size, size-hTSD, size+hTSD, warpThread.dataSource.color));\r\n    //                 })\r\n    //             })\r\n    //         }\r\n    //     })\r\n        \r\n    //     return instructions;\r\n    // }\r\n\r\n    // array to be used for generating datatexture,\r\n    const weaveDisplayColorBuffer = (state: LoomState) : string[] => {\r\n        const width = state.dimensions.warpCount;\r\n        const height = state.dimensions.weftCount;\r\n        const colorBuffer = new Array(width*height).fill(\"#000000\");\r\n        const index = (row: number, col: number) => row*(width) + col;\r\n        state.treadlingInstructions.forEach((treadleInstruction, row) => {\r\n            const currentWeftThread = state.weftThreads[row];\r\n            const activeWarpThreads = new Set();\r\n            treadleInstruction?.harnesses.forEach((harness) => {\r\n                harness.threads.forEach(thread => activeWarpThreads.add(thread));\r\n            })\r\n            state.warpThreads.forEach((currentWarpThread, col) => {\r\n                colorBuffer[index(row, col)] = activeWarpThreads.has(currentWarpThread) ? \r\n                    state.indexedThreadPalette.threadPalette[currentWarpThread.threadPaletteIndex].color : \r\n                    state.indexedThreadPalette.threadPalette[currentWeftThread.threadPaletteIndex].color;\r\n            })\r\n        });\r\n        console.log(colorBuffer);\r\n        return colorBuffer;\r\n    }\r\n\r\n    // const standardWarpDrawInstructionWGL = (x: number, y: number, width: number, height: number, color: string) : DrawingInstructionWGL => {\r\n    //     return ((ctx, colorLocation, program) => {\r\n    //         // ctx.rect(x,y,width,height);\r\n    //         // ctx.fillStyle = color;\r\n    //         setRectangle(ctx, col*size, row*size, size, size);\r\n\r\n    //         ctx.uniform4f(colorLocation, );\r\n\r\n    //         var primitiveType = ctx.TRIANGLES;\r\n    //         var offset = 0;\r\n    //         var count = 6;\r\n    //         ctx.drawArrays(primitiveType, offset, count);\r\n    //     })\r\n    // }\r\n\r\n    // const standardWeftDrawInstructionWGL = (y: number, width: number, height: number, color: string) : DrawingInstructionWGL => {\r\n    //     return ((ctx, colorLocation, program) => {\r\n    //         ctx.rect(0, y, width, height);\r\n    //         ctx.fillStyle = color;\r\n    //     })\r\n    // }\r\n\r\n    // const backgroundWarpDrawInstructionWGL = (x: number, width: number, height: number, color: string) : DrawingInstructionWGL => {\r\n    //     return ((ctx, colorLocation, program) => {\r\n    //         ctx.rect(x, 0, width, height);\r\n    //         ctx.fillStyle = color;\r\n    //     })\r\n    // }\r\n\r\n    // const WeaveDisplayDrawingInstructionsWGL = (state: LoomState) : DrawingInstructionWGL[] => {\r\n    //     const drawingInstructions: DrawingInstructionWGL[] = [];\r\n    //     const size = imageCellSize;\r\n    //     const threadSize = imageCellSize * (imageThreadWidth / 100.);\r\n    //     const halfThreadSizeDifference = (size - threadSize);\r\n    //     const hTSD = halfThreadSizeDifference;\r\n\r\n    //     state.warpThreads.forEach((warpThread, col) => {\r\n    //         instructions.push(backgroundWarpDrawInstruction((col*size)+hTSD, size-hTSD, state.weftThreads.length*size, warpThread.dataSource.color));\r\n    //     })\r\n        \r\n    //     state.weftThreads.forEach((weftThread, row) => {\r\n    //         // instructions.push(standardWeftDrawInstruction(row*size, state.warpThreads.length*size, size, weftThread.dataSource.color))\r\n    //         instructions.push(standardWeftDrawInstruction((row*size)+hTSD, state.warpThreads.length*size, size-hTSD, weftThread.dataSource.color))\r\n    //     })\r\n\r\n    //     state.treadlingInstructions.forEach((treadle, row) => {\r\n    //         if(treadle){\r\n    //             treadle.harnesses.forEach(harness => {\r\n    //                 harness.threads.forEach(warpThread => {\r\n    //                     instructions.push(standardWarpDrawInstruction((warpThread.id*size)+hTSD, row*size, size-hTSD, size+hTSD, warpThread.dataSource.color));\r\n    //                 })\r\n    //             })\r\n    //         }\r\n    //     })\r\n\r\n        /* OUTLINE OF INSTRUCTION\r\n        \r\n        setRectangle(glctx, x, y, w, h); (in utils)\r\n\r\n        // Set a color\r\n        gl.uniform4f(colorLocation, r, g, b, a)\r\n\r\n        // Draw the rectangle.\r\n        var primitiveType = gl.TRIANGLES;\r\n        var offset = 0;\r\n        var count = 6;\r\n        gl.drawArrays(primitiveType, offset, count);\r\n        \r\n        */\r\n\r\n        // drawingInstructions.push((ctx, colorLocation, program) => {\r\n        //     setRectangle(ctx, col*size, row*size, size, size);\r\n\r\n        //     ctx.uniform4f(colorLocation, );\r\n\r\n        //     var primitiveType = ctx.TRIANGLES;\r\n        //     var offset = 0;\r\n        //     var count = 6;\r\n        //     ctx.drawArrays(primitiveType, offset, count);\r\n        // })\r\n\r\n    //     return drawingInstructions;\r\n    // }\r\n\r\n    const handleDimensionsChange = (dimensions: LoomDimensions) => {\r\n        dispatch({ type: LoomActionType.SET_HARNESSCOUNT, harnessCount: dimensions.harnessCount});\r\n        dispatch({ type: LoomActionType.SET_TREADLECOUNT, treadleCount: dimensions.treadleCount});\r\n        dispatch({ type: LoomActionType.SET_WARPCOUNT, warpCount: dimensions.warpCount});\r\n        dispatch({ type: LoomActionType.SET_WEFTCOUNT, weftCount: dimensions.weftCount});\r\n    }\r\n\r\n    const handleSelectThreadDataSource = (selectedThreadDataSourceIndex: number) => {\r\n        dispatch({ type: LoomActionType.SET_SELECTEDTHREADDATASOURCEINDEX, dataSourceIndex: selectedThreadDataSourceIndex});\r\n    }\r\n\r\n    const handleOnAddThreadDataSource = (threadDataSourceToAdd: ThreadDataSource) => {\r\n        dispatch({ type: LoomActionType.ADD_THREADDATASOURCE, dataSource: threadDataSourceToAdd });\r\n    }\r\n\r\n    const handleSetThreadDataSource = (newthreadDataSource: ThreadDataSource) => {\r\n        dispatch({ type: LoomActionType.SET_SELECTEDTHREADDATASOURCE, dataSource: newthreadDataSource})\r\n    }\r\n\r\n    return (\r\n        <div className=\"LoomEditorContainer\">\r\n            <div className=\"LoomPane\">\r\n                <div className=\"LoomContainer\"\r\n                    style={{\r\n                        gridTemplateColumns: (state.dimensions.warpCount * Math.max(imageCellSize, imageUnitSize)) + \"px auto auto\",\r\n                        gridTemplateRows: \"auto auto \" + (state.dimensions.weftCount * Math.max(imageCellSize, imageUnitSize)) + \"px\"\r\n                    }}>\r\n                    <ThreadButtonGrid\r\n                        subGridType={SubGridType.WARPTHREADTABLE}\r\n                        cellSize={{width: imageCellSize, height: (imageCellSize/2.)}}\r\n                        gridValues={state.warpThreads}\r\n                        orientation={Orientation.HORIZONTAL}\r\n                        onClickHandler={loomGridOnClickEventHandler}\r\n                        palette={state.indexedThreadPalette}\r\n                        className={\"justifyEnd\"}/>\r\n                    <span className=\"void\">&nbsp;</span>\r\n                    <span className=\"void\">&nbsp;</span>\r\n                    <ButtonGrid \r\n                        subGridType={SubGridType.HARNESSTOTHREADTABLE} \r\n                        cellSize={imageCellSize}\r\n                        gridValues={topGridValues(state.warpThreads, state.harnesses)}\r\n                        onClickHandler={loomGridOnClickEventHandler}\r\n                        palette={state.indexedThreadPalette}\r\n                        className={\"justifyEnd\"}/>\r\n                    <ButtonGrid \r\n                        subGridType={SubGridType.TIEUPTABLE} \r\n                        cellSize={imageCellSize}\r\n                        gridValues={tieup(state.harnesses, state.treadles)}\r\n                        onClickHandler={loomGridOnClickEventHandler}\r\n                        palette={state.indexedThreadPalette}/>\r\n                    <span className=\"void\">&nbsp;</span>\r\n                    {/* OLD 2D SOLUTION USING CANVAS\r\n                        <WeaveDisplay\r\n                        repetitions={imageScale} \r\n                        dimensions={{x: state.dimensions.warpCount*imageCellSize, y: state.dimensions.weftCount*imageCellSize}}\r\n                        drawingInstructions={weaveDisplayDrawingInstructions(state)}\r\n                        backgroundClearColor={imageBackgroundColor}/> */}\r\n                    <div className=\"CanvasContainer\">\r\n                        <Canvas>\r\n                            <Scene\r\n                                warpThreadCount={state.dimensions.warpCount}\r\n                                weftThreadCount={state.dimensions.weftCount}\r\n                                unitSize={imageUnitSize}\r\n                                repeats={imageScale}\r\n                                colorBuffer={weaveDisplayColorBuffer(state)}\r\n                                cameraMode={props.cameraMode}\r\n                            />\r\n                        </Canvas>\r\n                        <div id=\"CanvasResizer\"\r\n                            onMouseDown={(e) => console.log(\"mdown\", e)}\r\n                            onMouseMove={(e) => console.log(\"mmove\", e)}\r\n                            onMouseUp={(e) => console.log(\"mup\", e)}/>\r\n                    </div>\r\n                    <ButtonGrid\r\n                        subGridType={SubGridType.TREADLINGTABLE}\r\n                        cellSize={imageCellSize}\r\n                        gridValues={rightGridValues(state.treadles, state.treadlingInstructions)}\r\n                        onClickHandler={loomGridOnClickEventHandler}\r\n                        palette={state.indexedThreadPalette}/>\r\n                    <ThreadButtonGrid \r\n                        subGridType={SubGridType.WEFTTHREADTABLE} \r\n                        cellSize={{width: (imageCellSize/2.), height: imageCellSize}}\r\n                        gridValues={state.weftThreads} orientation={Orientation.VERTICAL}\r\n                        onClickHandler={loomGridOnClickEventHandler}\r\n                        palette={state.indexedThreadPalette}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"EditorPanes\">\r\n                <DimensionsEditor\r\n                    dimensions={state.dimensions}\r\n                    onDimensionsChange={handleDimensionsChange}\r\n                    />\r\n                <ImageEditor>\r\n                    <form className=\"ImageEditorForm\">\r\n                        <label style={{verticalAlign: \"top\"}} htmlFor=\"cellSize\">cell size </label>\r\n                        <input type=\"range\" min=\"2\" max=\"16\" defaultValue=\"16\" id=\"cellSizeSlider\" onChange={({target}) => setImageCellSize(parseInt(target.value))}/><br/>\r\n\r\n                        {/* <label style={{verticalAlign: \"top\"}} htmlFor=\"cellSize\">cell size </label>\r\n                        <input type=\"range\" min=\"2\" max=\"16\" defaultValue=\"16\" id=\"cellSizeSlider\" onChange={({target}) => setImageCellSize(parseInt(target.value))}/><br/> */}\r\n\r\n                        <label style={{verticalAlign: \"top\"}} htmlFor=\"scaleSlider\">pattern scale </label>\r\n                        <input type=\"range\" min=\"1\" max=\"16\" defaultValue=\"1\" id=\"scaleSlider\" onChange={({target}) => setImageScale(parseInt(target.value))}/><br/>\r\n\r\n                        {/* <label style={{verticalAlign: \"top\"}} htmlFor=\"threadWidthSlider\">thread width </label>\r\n                        <input type=\"range\" min=\"0\" max=\"100\" defaultValue=\"100\" id=\"threadWidthSlider\" onChange={({target}) => setImageThreadWidth(parseInt(target.value))}/><br/> */}\r\n\r\n                        {/* <label style={{verticalAlign: \"top\"}} htmlFor=\"threadWidthSlider\">background color </label>\r\n                        <input type=\"color\" defaultValue=\"#000000\" id=\"background\" className=\"ColorPicker\" onChange={({target}) => setImageBackgroundColor((target.value))}/><br/> */}\r\n                    </form>\r\n                </ImageEditor>\r\n                <ThreadEditor\r\n                    onSelectThreadDataSource={handleSelectThreadDataSource}\r\n                    onSetThreadDataSource={handleSetThreadDataSource}\r\n                    onAddThreadDataSource={handleOnAddThreadDataSource}\r\n                    indexedThreadPalette={state.indexedThreadPalette}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loom;\r\n","import './ToolBarMenu.css';\r\n\r\n// interface ToolBarMenuProps {\r\n//     name: string,\r\n//     children: JSX.Element[]\r\n// }\r\n\r\nconst ToolBarMenu = (props: any) => {\r\n\r\n\r\n    return (\r\n        <div className=\"ToolBarMenu\">\r\n        <div className=\"ToolBarMenuName\">{props.name}</div>\r\n        <div className=\"ToolBarMenuChildren\">\r\n            {props.children}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToolBarMenu;","import { ReactNode } from \"react\";\r\nimport './ToolBarMenuNode.css'\r\n\r\n// interface ToolBarMenuNodeProps {\r\n//     children: ReactNode[];\r\n//     text: string\r\n// }\r\n\r\nconst ToolBarMenuNode = (props: any) => {\r\n    return (\r\n        <div onClick={props.onClick} className={props.className ? props.className : \"ToolBarMenuNode\"}>\r\n            <span>{props.text}</span>\r\n            <div className={\"ToolBarMenuSubNodes \"+ (props.children ? \"populated\" : \"\")}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToolBarMenuNode;","import { LoomStateStringRepresentation } from \"../types\";\r\n\r\nconst STANDARD_TIEUP = \"1+4,1+2,2+3,3+4\";\r\n\r\nexport const patterns : Array<LoomStateStringRepresentation> = [\r\n    {\r\n      name: \"Basic Twill\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Periwinkle\",\r\n      data: {\r\n        threading:  \"3,2,1,4,3,2,1,4,3,4,3,2,3,2,1,4,3,4,1,2,3,2,3,4,3,4,1,2\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,2,1,4x3,3x3,2,1,4x2,1,2,3x3,4x3,1,2,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Diadem\",\r\n      data: {\r\n        threading:  \"4,1,2,3,4,1,2,3,4,1,2,3,2,3,2,1,4,3,4,3,4,1,2,1,2,1,4,3,4,3,4,1,2,3,2,3,2,1,4,3,2,1,4,3,2,1,4,1\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3x2,4,1,2,3,4,1,2,3,4,1x4,4,3,2x4,3,4x4,3,2x4,3,4,1x4,4,3,2,1,4,3,2,1,4,3x2\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Rings and Chains\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,3,4,1,2,3,4,1,4,1,4,3,4,3,2,3,2,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,2,1,2,3,2,3,4,3,4,1,4,1,4,3,2,1,4,1,2,3,4\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"1,2,3,4,1x4,4x3,3x3,2x3,1x2,2x2,1x2,2x2,1x2,2x2,1x2,2x2,1x2,2x2,1x2,2x3,3x3,4x3,1x4,4,3,2,1\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Wheel of Fortune\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,1,2,3,2,3,4,3,4,1,4,3,4,1,4,3,4,3,2,3,2,1,2,1,4,3,2,1,4,3,2,1,4,3,2,3,2,1,2,1,4,1,4,3,4,1,4,3,4,1,4,1,2,1,2,3,2,3,4,1,2,3,4\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"2,3,4,1,2x3,3x3,4x3,1x2,4x2,1x2,4x3,3x3,2x3,1,4,3,2,1,4,3,2,1,4,3x3,2x3,1x3,4x2,1x2,4x2,1x3,2x3,3x3,4,1,2,3,4,1\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Chariot Wheel No. 3\",\r\n      data: {\r\n        threading:  \"4,3,2,1,4,3,2,3,4,3,2,3,4,1,4,1,4,1,2,1,2,1,4,1,2,1,4,1,2,1,2,1,4,1,4,1,4,3,2,3,4,3,2,3,4,1,2,3\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"4,3,2,1,4,3x2,4x2,3x2,4,1x5,2x4,1x2,2x2,1x2,2x4,1x5,4,3x2,4x2,3x2,4,1,2,3,4\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Chariot Wheel No. 3 Alt\",\r\n      data: {\r\n        threading:  \"4,3,2,1,4,3,2,3,4,3,2,3,4,1,4,1,4,1,2,1,2,1,4,1,2,1,4,1,2,1,2,1,4,1,4,1,4,3,2,3,4,3,2,3,4,1,2,3\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,4,1,2,3,4x2,3x2,4x2,3,2x5,1x4,2x2,1x2,2x2,1x4,2x5,3,4x2,3x2,4x2,3,2,1,4,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Church Windows\",\r\n      data: {\r\n        threading:  \"3,2,1,4,3,4,3,4,1,4,1,2,1,4,1,4,3,4,3,4,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,4,3,4,3,4,1,4,1,2,1,4,1,4,3,4,3,4,2,1\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,2,1,4x4,1x3,2x2,1x3,4x4,1,2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2,1,4x4,1x3,2x2,1x3,4x4,1,2,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Cambridge Beauty\",\r\n      data: {\r\n        threading:  \"2,3,4,1,4,1,4,1,4,3,4,3,4,3,2,3,2,3,2,1,2,1,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,1,2,1,2,3,2,3,2,3,4,3,4,3,4,1,4,1,4,1,4,3\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"3,4,1x6,4x5,3x5,2x6,3,4x2,3,2x2,3,4x2,3,2x2,3,4x2,3,2x2,3,4x2,3,2x2,3,4x2,3,2x6,3x5,4x5,1x6,4,3\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Star of Bethlehem\",\r\n      data: {\r\n        threading:  \"2,3,4,1,2,3,4,1,2,3,4,1,2,1,2,3,2,3,4,3,4,1,4,1,2,3,4,1,4,3,2,1,4,1,4,3,4,3,2,3,2,1,2,1,4,3,2,1\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"2,3,4,1,2,3,4,1,2,3,4,1,2x3,3x3,4x3,1x3,1,2,3,4,1x2,4,3,2,1x3,4x3,3x3,2x3,1,4,3,2\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Maltese Cross\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,1,4,1,4,3,4,3,2,3,2,1,2,1,4,1,2,1,4,1,2,1,2,3,2,3,4,3,4,1,4,1,2,1,4,3,2\",\r\n        tieup:      \"1+4,1+2,2+3,3+4\",\r\n        treadling:  \"2,1,4,3,2,1,4,3,2x2,3x3,4x3,1x3,2x3,3x2,2x2,3x2,2x3,1x3,4x3,3x3,2x2,3,4,1,2\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Orange Peel A\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,3,2,3,4,3,4,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,4,3,4,3,2,3,2,1,4,3,2\",\r\n        tieup:      STANDARD_TIEUP,\r\n        treadling:  \"2,3,4,1,2,3x3,4x3,1x3,2x2,1x2,2x2,1x2,2x2,1x3,4x3,3x3,2,1,4,3,2\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Orange Peel B\",\r\n      data: {\r\n        threading:  \"1,2,3,4,1,2,3,2,3,4,3,4,1,4,1,2,1,4,1,2,1,4,1,2,1,4,1,4,3,4,3,2,3,2,1,4,3,2\",\r\n        tieup:      STANDARD_TIEUP,\r\n        treadling:  \"1,4,3,2,1,4x3,3x3,2x3,1x2,2x2,1x2,2x2,1x2,2x3,3x3,4x3,1,2,3,4,1\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Lovers Knot No. 1\",\r\n      data: {\r\n        threading: \"4,3,2,1,2,1,2,3,4,3,4,1,4,3,4,1,4,3,4,3,2,1,2,1,2,3,4,1,2,3,2,1,4,3,2,1,2,3,4,1,2,3,2,1\",\r\n        tieup:      STANDARD_TIEUP,\r\n        treadling: \"4,3,2x4,3,4x3,1x2,4x2,1x2,4x3,3,2x4,3,4,1,2,3x2,2,1,4,3,2x2,3,4,1,2,3x2,2,1\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Lovers Knot No. 2\",\r\n      data: {\r\n        threading: \"3,2,1,4,3,2,3,2,1,2,3,2,1,2,3,2,3,4,3,4,3,4,1,4,1,4,1,4,3,4,1,4,3,4,1,4,1,4,1,4,3,4,3,4,3,2,3,2,1,2,3,2,1,2,3,2,3,4,1,2,3,2,1,4,3,2,1,2,3,4,1,2\",\r\n        tieup:      STANDARD_TIEUP,\r\n        treadling: \"2,3,4,1,2,3x2,2,1,4,3x3,2x2,3x2,2x2,3x3,4x5,1x6,4x2,1x2,4x2,1x6,4x5,3x3,2x2,3x2,2x2,3x3,4,1,2,3x2,2,1,4,3,2\"\r\n      }\r\n    },\r\n    {\r\n      name: \"Cross of Tennessee\",\r\n      data: {\r\n        threading: \"4,3,2,1,4,3,2,1,4,1,4,1,4,3,4,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,4,3,4,1,4,1,4,1,2,3,4,1,2,3,4,1\",\r\n        tieup: STANDARD_TIEUP,\r\n        treadling: \"1,4,3,2,1,4,3,2,1x5,4x3,3,2x2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2x2,3x2,2x2,3,4x3,1x5,2,3,4,1,2,3,4,1\"\r\n      }\r\n    }\r\n  ]\r\n  ","import { CameraMode, LoomState, LoomStateDict, LoomStateStringRepresentation, SerializedLoomState } from \"../../types\";\r\nimport { createLoomStateFromStringDataRepesentation } from \"../../utils\";\r\nimport ToolBarMenu from \"../ToolBarMenu/ToolBarMenu\";\r\nimport ToolBarMenuNode from \"../ToolBarMenuNode/ToolBarMenuNode\";\r\nimport {patterns as presetPatterns} from '../../presets/presetWeavingPatterns'\r\n\r\ninterface ToolBarProps {\r\n    saveStateDict: LoomStateDict,\r\n    saveStateNames: {[id: string]: string}\r\n    onLoad: (stateID: string) => void,\r\n    onSaveAs: (...args: any) => void,\r\n    onSave: (...args: any) => void,\r\n    onLoadPreset: (state: LoomState) => void,\r\n    onCreateNew: (...args: any) => void,\r\n    onDimensionChange: (...args: any) => void\r\n}\r\n\r\nconst ToolBar = (props: ToolBarProps) => {\r\n    //serializedState: SerializedLoomState\r\n    const stateIDAsToolBarMenuNode = (id: string) => {\r\n        return <ToolBarMenuNode \r\n                    className=\"ToolBarMenuSubNode\"\r\n                    text={props.saveStateNames[id]}\r\n                    onClick={() => props.onLoad(id)}/>\r\n    }\r\n\r\n    const saveStateToolBarMenuNodes : React.ReactNode[] = Object.keys(props.saveStateDict).map((stateID : string) => {\r\n        return stateIDAsToolBarMenuNode(stateID);\r\n    })\r\n\r\n    const presetStateAsToolBarMenuNode = (state: LoomState) => {\r\n        return <ToolBarMenuNode\r\n                    className=\"ToolBarMenuSubNode\"\r\n                    text={state.name}\r\n                    onClick={() => props.onLoadPreset(state)}/>\r\n    }\r\n\r\n    const presetStateToolBarMenuNodes = (stateStrings : Array<LoomStateStringRepresentation>) : React.ReactNode[] => {\r\n        return stateStrings\r\n                .map(stateString => createLoomStateFromStringDataRepesentation(stateString))\r\n                .map((state, i) => presetStateAsToolBarMenuNode(state));\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <ToolBarMenu name={\"File\"}>\r\n            <ToolBarMenuNode\r\n                text=\"Create New\"\r\n                onClick={props.onCreateNew}\r\n                />\r\n            <ToolBarMenuNode\r\n                text=\"Save\"\r\n                onClick={props.onSave}\r\n                />\r\n            <ToolBarMenuNode\r\n                text=\"Save As\"\r\n                onClick={props.onSaveAs}\r\n                />\r\n            <ToolBarMenuNode\r\n                text=\"Load\">\r\n                {[...saveStateToolBarMenuNodes]}\r\n            </ToolBarMenuNode>\r\n            <ToolBarMenuNode\r\n                text=\"Load Preset\">\r\n                {[...presetStateToolBarMenuNodes(presetPatterns)]}\r\n            </ToolBarMenuNode>\r\n        </ToolBarMenu>\r\n        <ToolBarMenu name={\"View\"}>\r\n            <ToolBarMenuNode\r\n                text=\"Dimensions\">\r\n                <ToolBarMenuNode\r\n                    text=\"2D\"\r\n                    onClick={ () => props.onDimensionChange(CameraMode.Orthographic) }/>\r\n                <ToolBarMenuNode\r\n                    text=\"3D\"\r\n                    onClick={ () => props.onDimensionChange(CameraMode.Perspective) }/>\r\n            </ToolBarMenuNode>\r\n        </ToolBarMenu>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToolBar;","import { useEffect, useState } from 'react'\r\n\r\n\r\nfunction useLocalStorage<T>(\r\n\r\n  key: string,\r\n\r\n  initialValue: T,\r\n\r\n): [T, (value: T) => void] {\r\n\r\n  // Get from local storage then\r\n\r\n  // parse stored json or return initialValue\r\n\r\n  const readValue = () => {\r\n\r\n    // Prevent build error \"window is undefined\" but keep keep working\r\n\r\n    if (typeof window === 'undefined') {\r\n\r\n      return initialValue\r\n\r\n    }\r\n\r\n\r\n    try {\r\n\r\n      const item = window.localStorage.getItem(key)\r\n\r\n      return item ? JSON.parse(item) : initialValue\r\n\r\n    } catch (error) {\r\n\r\n      console.warn(`Error reading localStorage key “${key}”:`, error)\r\n\r\n      return initialValue\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // State to store our value\r\n\r\n  // Pass initial state function to useState so logic is only executed once\r\n\r\n  const [storedValue, setStoredValue] = useState<T>(readValue)\r\n\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n\r\n  // ... persists the new value to localStorage.\r\n\r\n  const setValue = (value: T) => {\r\n\r\n    // Prevent build error \"window is undefined\" but keeps working\r\n\r\n    if (typeof window == 'undefined') {\r\n\r\n      console.warn(\r\n\r\n        `Tried setting localStorage key “${key}” even though environment is not a client`,\r\n\r\n      )\r\n\r\n    }\r\n\r\n\r\n    try {\r\n\r\n      // Allow value to be a function so we have the same API as useState\r\n\r\n      const newValue = value instanceof Function ? value(storedValue) : value\r\n\r\n\r\n      // Save to local storage\r\n\r\n      window.localStorage.setItem(key, JSON.stringify(newValue))\r\n\r\n\r\n      // Save state\r\n\r\n      setStoredValue(newValue)\r\n\r\n\r\n      // We dispatch a custom event so every useLocalStorage hook are notified\r\n\r\n      window.dispatchEvent(new Event('local-storage'))\r\n\r\n    } catch (error) {\r\n\r\n      console.warn(`Error setting localStorage key “${key}”:`, error)\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    setStoredValue(readValue())\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const handleStorageChange = () => {\r\n\r\n      setStoredValue(readValue())\r\n\r\n    }\r\n\r\n\r\n    // this only works for other documents, not the current one\r\n\r\n    window.addEventListener('storage', handleStorageChange)\r\n\r\n\r\n    // this is a custom event, triggered in writeValueToLocalStorage\r\n\r\n    window.addEventListener('local-storage', handleStorageChange)\r\n\r\n\r\n    return () => {\r\n\r\n      window.removeEventListener('storage', handleStorageChange)\r\n\r\n      window.removeEventListener('local-storage', handleStorageChange)\r\n\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n  }, [])\r\n\r\n\r\n  return [storedValue, setValue]\r\n\r\n}\r\n\r\n\r\nexport default useLocalStorage","import './Dialog.css'\r\n\r\nconst Dialog = (props: any) => {\r\n    return (\r\n        <div className=\"DialogContainer\">\r\n            <div className=\"DialogBox\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import './Container.scss';\r\nimport Loom from '../LoomEditor/LoomEditor';\r\n// import { SaveLoadMenu } from '../SaveLoadMenu/SaveLoadMenu';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { CameraMode, LoomState, LoomStateDict, SerializedLoomState } from '../../types';\r\nimport ToolBarFileMenu from '../ToolBar/ToolBar';\r\nimport ToolBar from '../ToolBar/ToolBar';\r\nimport useLocalStorage from '../../Hooks/useLocalStorage';\r\nimport { convertJSONToLoomState, convertLoomStateToJSON, createLoomState, createUUID, dimensionDefault } from '../../utils';\r\nimport { reduceEachLeadingCommentRange } from 'typescript';\r\nimport Dialog from '../Dialog/Dialog';\r\nvar cloneDeep = require('lodash/cloneDeep');\r\n\r\n\r\nconst Container = () => {\r\n    const [saveStateDict, setSaveStateDict] = useLocalStorage<LoomStateDict>('saveStates', {});\r\n    const [saveStateNames, setSaveStateNames] = useLocalStorage<{[id: string]: string}>('saveStateNames', {});\r\n    const initialState : LoomState = createLoomState(dimensionDefault);\r\n    const [currentState, setCurrentState] = useState<LoomState>(initialState);\r\n    const [openDialog, setOpenDialog] = useState<boolean>(false);\r\n    const [currentDialog, setCurrentDialog] = useState<JSX.Element>();\r\n    const [liveStateRef, setLiveStateRef] = useState<LoomState>(currentState);\r\n    const [cameraMode, setCameraMode] = useState<CameraMode>(CameraMode.Orthographic);\r\n\r\n    const updateLiveStateRef = (ref: LoomState) => {\r\n        setLiveStateRef(ref);\r\n    }\r\n\r\n    // save new state to state ref with ID\r\n    const handleSave = () => {\r\n        const serializedLoomState: SerializedLoomState = convertLoomStateToJSON(liveStateRef); \r\n        setSaveStateDict({...saveStateDict, [liveStateRef.id]: serializedLoomState});\r\n        setSaveStateNames({...saveStateNames, [liveStateRef.id]: liveStateRef.name});\r\n    }\r\n\r\n    // push new state with newly generated uuid with new name\r\n\r\n    // DIALOGS - CLICK OPENS\r\n    const handleSaveAsClickOpen = () => {\r\n        setCurrentDialog(SaveAsDialog);\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const handleCreateNewClickOpen = () => {\r\n        setCurrentDialog(CreateNewDialog);\r\n        setOpenDialog(true);\r\n    }\r\n    //\r\n\r\n    // DIALOG HANDLERS\r\n    const handleCreateNew = (e: any) => {\r\n        setOpenDialog(false);\r\n        e.preventDefault();\r\n        \r\n        const newState = createLoomState(dimensionDefault);\r\n        const newName = e.target[\"fileName\"].value;\r\n        newState.name = newName;\r\n        setCurrentState(newState);\r\n    }\r\n\r\n    const handleSaveAs = (e: any) => {\r\n        setOpenDialog(false);\r\n        e.preventDefault();\r\n        \r\n        const newUUID = createUUID();\r\n        const stateClone = cloneDeep(liveStateRef);\r\n        const newName = e.target[\"newFileName\"].value;\r\n        stateClone.name = newName;\r\n        stateClone.id = newUUID;\r\n        \r\n        const serilizedState : SerializedLoomState = convertLoomStateToJSON(liveStateRef);\r\n        setSaveStateDict({...saveStateDict, [newUUID]: serilizedState});\r\n        setSaveStateNames({...saveStateNames, [stateClone.id]: stateClone.name});\r\n        setCurrentState(stateClone);\r\n    }\r\n    //\r\n\r\n    const handleClose = () => {\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    const handleLoad = (stateID: string) => {\r\n        const serializedState : SerializedLoomState = saveStateDict[stateID];\r\n        const state : LoomState = convertJSONToLoomState(serializedState);\r\n        setCurrentState(state);\r\n    }\r\n\r\n    const handleLoadPreset = (state: LoomState) => {\r\n        setCurrentState(state);\r\n    }\r\n\r\n\r\n    const SaveAsDialog = (\r\n        <Dialog>\r\n            <form className=\"w100\" onSubmit={handleSaveAs}>\r\n                <div className=\"w100\">\r\n                    <span>New file name:</span>\r\n                    <input type=\"text\" name=\"newFileName\" className=\"underline w100\" placeholder={liveStateRef.name}></input>\r\n                </div>\r\n                <div className=\"w100\" style={{\"marginTop\":\"1em\"}}>\r\n                    <button className=\"cancelBtn\" style={{\"width\":\"50%\"}} onClick={handleClose}>Cancel</button>\r\n                    <button type=\"submit\" className=\"saveBtn\" style={{\"width\":\"50%\"}}>Save</button>\r\n                </div>\r\n            </form>\r\n        </Dialog>\r\n    )\r\n\r\n    const CreateNewDialog = (\r\n        <Dialog>\r\n            <form className=\"w100\" onSubmit={handleCreateNew}>\r\n                <div className=\"w100\">\r\n                    <span>File name:</span>\r\n                    <input type=\"text\" name=\"fileName\" className=\"underline w100\" placeholder=\"untitled\"></input>\r\n                </div>\r\n                <div className=\"w100\" style={{\"marginTop\":\"1em\"}}>\r\n                    <button className=\"cancelBtn\" style={{\"width\":\"50%\"}} onClick={handleClose}>Cancel</button>\r\n                    <button type=\"submit\" className=\"saveBtn\" style={{\"width\":\"50%\"}}>Create</button>\r\n                </div>\r\n            </form>\r\n        </Dialog>\r\n    )\r\n\r\n    return (\r\n        <div className=\"Container\">\r\n            <ToolBar\r\n                saveStateDict={saveStateDict}\r\n                saveStateNames={saveStateNames}\r\n                onCreateNew={handleCreateNewClickOpen}\r\n                onLoad={handleLoad}\r\n                onLoadPreset={handleLoadPreset}\r\n                onSaveAs={handleSaveAsClickOpen}\r\n                onSave={handleSave}\r\n                onDimensionChange={ (newMode) => setCameraMode(newMode) }/>\r\n            <Loom\r\n                currentState={currentState}\r\n                onChange={updateLiveStateRef}\r\n                cameraMode={cameraMode}/>\r\n\r\n            {/* if dialog is open show current dialog */}\r\n            {openDialog && currentDialog}\r\n            {/* Dialog if Save As or Create New are selected in the file menu */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","import React from 'react';\nimport Container from '../Container/Container';\nimport './App.css';\nimport '../../Styles/typography.scss';\nimport '../../Styles/form.scss';\nimport '../../Styles/layout.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container></Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}